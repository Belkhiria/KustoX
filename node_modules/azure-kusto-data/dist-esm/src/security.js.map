{"version":3,"file":"security.js","sourceRoot":"","sources":["../../src/security.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport KustoConnectionStringBuilder from \"./connectionBuilder\";\nimport * as TokenProvider from \"./tokenProvider\";\nimport { KustoAuthenticationError } from \"./errors\";\nimport { BasicTokenProvider, CallbackTokenProvider, TokenProviderBase, UserPromptProvider, TokenCredentialProvider } from \"./tokenProvider\";\n\nexport class AadHelper {\n    tokenProvider?: TokenProviderBase;\n\n    constructor(kcsb: KustoConnectionStringBuilder) {\n        if (!kcsb.dataSource) {\n            throw new Error(\"Invalid string builder - missing dataSource\");\n        }\n\n        if (!!kcsb.aadUserId && !!kcsb.password) {\n            this.tokenProvider = new TokenProvider.UserPassTokenProvider(kcsb.dataSource, kcsb.aadUserId, kcsb.password, kcsb.authorityId, kcsb.timeoutMs);\n        } else if (!!kcsb.applicationClientId && !!kcsb.applicationKey) {\n            this.tokenProvider = new TokenProvider.ApplicationKeyTokenProvider(\n                kcsb.dataSource,\n                kcsb.applicationClientId,\n                kcsb.applicationKey,\n                kcsb.authorityId,\n                kcsb.timeoutMs\n            );\n        } else if (!!kcsb.applicationClientId && (!!kcsb.applicationCertificatePrivateKey || !!kcsb.applicationCertificatePath)) {\n            this.tokenProvider = new TokenProvider.ApplicationCertificateTokenProvider(\n                kcsb.dataSource,\n                kcsb.applicationClientId,\n                kcsb.applicationCertificatePrivateKey,\n                kcsb.applicationCertificatePath,\n                kcsb.applicationCertificateSendX5c,\n                kcsb.authorityId,\n                kcsb.timeoutMs\n            );\n        } else if (kcsb.useManagedIdentityAuth) {\n            this.tokenProvider = new TokenProvider.MsiTokenProvider(kcsb.dataSource, kcsb.msiClientId, kcsb.authorityId, kcsb.timeoutMs);\n        } else if (kcsb.useAzLoginAuth) {\n            this.tokenProvider = new TokenProvider.AzCliTokenProvider(kcsb.dataSource, kcsb.authorityId, kcsb.timeoutMs);\n        } else if (kcsb.accessToken) {\n            this.tokenProvider = new BasicTokenProvider(kcsb.dataSource, kcsb.accessToken as string);\n        } else if (kcsb.useUserPromptAuth) {\n            this.tokenProvider = new UserPromptProvider(kcsb.dataSource, kcsb.interactiveCredentialOptions, kcsb.timeoutMs);\n        } else if (kcsb.tokenProvider) {\n            this.tokenProvider = new CallbackTokenProvider(kcsb.dataSource, kcsb.tokenProvider);\n        } else if (kcsb.useDeviceCodeAuth) {\n            this.tokenProvider = new TokenProvider.DeviceLoginTokenProvider(kcsb.dataSource, kcsb.deviceCodeCallback, kcsb.authorityId, kcsb.timeoutMs);\n        } else if (kcsb.tokenCredential) {\n            this.tokenProvider = new TokenCredentialProvider(kcsb.dataSource, kcsb.tokenCredential, kcsb.timeoutMs);\n        }\n    }\n\n    async getAuthHeader(): Promise<string | null> {\n        if (!this.tokenProvider) {\n            return null;\n        }\n        try {\n            const token = await this.tokenProvider.acquireToken();\n            return `${token.tokenType} ${token.accessToken}`;\n        } catch (e) {\n            throw new KustoAuthenticationError(\n                e instanceof Error ? e.message : `${e}`,\n                e instanceof Error ? e : undefined,\n                this.tokenProvider.constructor.name,\n                this.tokenProvider.context()\n            );\n        }\n    }\n}\n\nexport default AadHelper;\n"]}