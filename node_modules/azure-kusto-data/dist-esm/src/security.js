"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AadHelper = void 0;
const TokenProvider = __importStar(require("./tokenProvider"));
const errors_1 = require("./errors");
const tokenProvider_1 = require("./tokenProvider");
class AadHelper {
    constructor(kcsb) {
        if (!kcsb.dataSource) {
            throw new Error("Invalid string builder - missing dataSource");
        }
        if (!!kcsb.aadUserId && !!kcsb.password) {
            this.tokenProvider = new TokenProvider.UserPassTokenProvider(kcsb.dataSource, kcsb.aadUserId, kcsb.password, kcsb.authorityId, kcsb.timeoutMs);
        }
        else if (!!kcsb.applicationClientId && !!kcsb.applicationKey) {
            this.tokenProvider = new TokenProvider.ApplicationKeyTokenProvider(kcsb.dataSource, kcsb.applicationClientId, kcsb.applicationKey, kcsb.authorityId, kcsb.timeoutMs);
        }
        else if (!!kcsb.applicationClientId && (!!kcsb.applicationCertificatePrivateKey || !!kcsb.applicationCertificatePath)) {
            this.tokenProvider = new TokenProvider.ApplicationCertificateTokenProvider(kcsb.dataSource, kcsb.applicationClientId, kcsb.applicationCertificatePrivateKey, kcsb.applicationCertificatePath, kcsb.applicationCertificateSendX5c, kcsb.authorityId, kcsb.timeoutMs);
        }
        else if (kcsb.useManagedIdentityAuth) {
            this.tokenProvider = new TokenProvider.MsiTokenProvider(kcsb.dataSource, kcsb.msiClientId, kcsb.authorityId, kcsb.timeoutMs);
        }
        else if (kcsb.useAzLoginAuth) {
            this.tokenProvider = new TokenProvider.AzCliTokenProvider(kcsb.dataSource, kcsb.authorityId, kcsb.timeoutMs);
        }
        else if (kcsb.accessToken) {
            this.tokenProvider = new tokenProvider_1.BasicTokenProvider(kcsb.dataSource, kcsb.accessToken);
        }
        else if (kcsb.useUserPromptAuth) {
            this.tokenProvider = new tokenProvider_1.UserPromptProvider(kcsb.dataSource, kcsb.interactiveCredentialOptions, kcsb.timeoutMs);
        }
        else if (kcsb.tokenProvider) {
            this.tokenProvider = new tokenProvider_1.CallbackTokenProvider(kcsb.dataSource, kcsb.tokenProvider);
        }
        else if (kcsb.useDeviceCodeAuth) {
            this.tokenProvider = new TokenProvider.DeviceLoginTokenProvider(kcsb.dataSource, kcsb.deviceCodeCallback, kcsb.authorityId, kcsb.timeoutMs);
        }
        else if (kcsb.tokenCredential) {
            this.tokenProvider = new tokenProvider_1.TokenCredentialProvider(kcsb.dataSource, kcsb.tokenCredential, kcsb.timeoutMs);
        }
    }
    async getAuthHeader() {
        if (!this.tokenProvider) {
            return null;
        }
        try {
            const token = await this.tokenProvider.acquireToken();
            return `${token.tokenType} ${token.accessToken}`;
        }
        catch (e) {
            throw new errors_1.KustoAuthenticationError(e instanceof Error ? e.message : `${e}`, e instanceof Error ? e : undefined, this.tokenProvider.constructor.name, this.tokenProvider.context());
        }
    }
}
exports.AadHelper = AadHelper;
exports.default = AadHelper;
//# sourceMappingURL=security.js.map