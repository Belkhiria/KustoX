{"version":3,"file":"tokenProvider.js","sourceRoot":"","sources":["../../src/tokenProvider.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport {\n    AzureCliCredential,\n    ManagedIdentityCredential,\n    ClientSecretCredential,\n    ClientCertificateCredential,\n    ClientCertificateCredentialOptions,\n    ClientCertificatePEMCertificate,\n    DeviceCodeCredential,\n    DeviceCodeInfo,\n    UsernamePasswordCredential,\n    InteractiveBrowserCredentialInBrowserOptions,\n    InteractiveBrowserCredentialNodeOptions,\n    InteractiveBrowserCredential,\n} from \"@azure/identity\";\nimport { TokenCredential } from \"@azure/core-auth\";\nimport { CloudInfo, CloudSettings } from \"./cloudSettings\";\n\nexport declare type TokenResponse = {\n    tokenType: string;\n    accessToken: string;\n};\n\nexport interface TokenType {\n    tokenType: string;\n    accessToken: string;\n}\n\nconst BEARER_TYPE = \"Bearer\";\n\n/**\n * This base class abstracts token acquisition for all implementations.\n * The class is build for Lazy initialization, so that the first call, take on instantiation of 'heavy' long-lived class members\n */\nexport abstract class TokenProviderBase {\n    kustoUri: string;\n    scopes!: string[];\n\n    abstract acquireToken(): Promise<TokenResponse>;\n\n    context(): Record<string, any> {\n        return {};\n    }\n\n    protected constructor(kustoUri: string) {\n        this.kustoUri = kustoUri;\n        if (kustoUri != null) {\n            const suffix = (!this.kustoUri.endsWith(\"/\") ? \"/\" : \"\") + \".default\";\n            this.scopes = [kustoUri + suffix];\n        }\n    }\n}\n\n/**\n * Basic Token Provider keeps and returns a token received on construction\n */\nexport class BasicTokenProvider extends TokenProviderBase {\n    token: string;\n\n    constructor(kustoUri: string, token: string) {\n        super(kustoUri);\n        this.token = token;\n    }\n\n    acquireToken(): Promise<TokenResponse> {\n        return Promise.resolve<TokenResponse>({\n            tokenType: BEARER_TYPE,\n            accessToken: this.token,\n        });\n    }\n}\n\n/**\n * Callback Token Provider generates a token based on a callback function provided by the caller\n */\nexport class CallbackTokenProvider extends TokenProviderBase {\n    callback: () => Promise<string>;\n\n    constructor(kustoUri: string, callback: () => Promise<string>) {\n        super(kustoUri);\n        this.callback = callback;\n    }\n\n    async acquireToken(): Promise<TokenResponse> {\n        const token = await this.callback();\n        return { tokenType: BEARER_TYPE, accessToken: token };\n    }\n}\n\n/**\n * Token providers that require cloud settings to be configured - msal and azure identity\n */\nexport abstract class CloudSettingsTokenProvider extends TokenProviderBase {\n    protected cloudInfo!: CloudInfo;\n    protected initialized: boolean;\n\n    abstract initClient(): void;\n\n    abstract acquireTokenWithCloudSettings(): Promise<TokenType | null>;\n\n    additionalCloudSettingsInit(): void {}\n\n    protected constructor(kustoUri: string) {\n        super(kustoUri);\n        this.initialized = false;\n    }\n\n    async acquireToken(): Promise<TokenResponse> {\n        if (!this.initialized) {\n            if (this.cloudInfo == null) {\n                this.cloudInfo = await CloudSettings.getCloudInfoForCluster(this.kustoUri);\n                let resourceUri = this.cloudInfo.KustoServiceResourceId;\n                if (this.cloudInfo.LoginMfaRequired) {\n                    resourceUri = resourceUri.replace(\".kusto.\", \".kustomfa.\");\n                }\n                this.scopes = [resourceUri + \"/.default\"];\n                this.additionalCloudSettingsInit();\n                this.initClient();\n            }\n            this.initialized = true;\n        }\n\n        const token = await this.acquireTokenWithCloudSettings();\n        if (token) {\n            return { tokenType: token.tokenType, accessToken: token.accessToken };\n        }\n        throw new Error(\"Failed to get token from msal\");\n    }\n\n    context(): Record<string, any> {\n        return {\n            ...super.context(),\n            kustoUri: this.kustoUri,\n        };\n    }\n}\n\nexport abstract class AzureIdentityProvider extends CloudSettingsTokenProvider {\n    private credential!: TokenCredential;\n\n    constructor(kustoUri: string, protected authorityId?: string, private timeoutMs?: number) {\n        super(kustoUri);\n    }\n\n    initClient(): void {\n        this.credential = this.getCredential();\n    }\n\n    async acquireTokenWithCloudSettings(): Promise<TokenType | null> {\n        const response = await this.credential.getToken(this.scopes, {\n            requestOptions: {\n                timeout: this.timeoutMs,\n            },\n            tenantId: this.authorityId,\n        });\n        if (response === null) {\n            throw new Error(\"Failed to get token from msal\");\n        }\n        return { tokenType: BEARER_TYPE, accessToken: response.token };\n    }\n\n    context(): Record<string, any> {\n        let base: Record<string, any> = {\n            ...super.context(),\n            kustoUri: this.kustoUri,\n            authorityId: this.authorityId,\n        };\n        if (this.timeoutMs) {\n            base = { ...base, timeoutMs: this.timeoutMs };\n        }\n\n        return base;\n    }\n\n    abstract getCredential(): TokenCredential;\n}\n\n/**\n * TokenCredentialProvider receives any TokenCredential to create a token with.\n */\nexport class TokenCredentialProvider extends AzureIdentityProvider {\n    constructor(kustoUri: string, private tokenCredential: TokenCredential, timeoutMs?: number) {\n        super(kustoUri, undefined, timeoutMs);\n    }\n\n    getCredential(): TokenCredential {\n        return this.tokenCredential;\n    }\n}\n\n/**\n * UserPromptProvider will pop up a login prompt to acquire a token.\n */\nexport class UserPromptProvider extends AzureIdentityProvider {\n    // The default port is 80, which can lead to permission errors, so we'll choose another port\n    readonly MinPort = 20000;\n    readonly MaxPort = 65536;\n\n    constructor(\n        kustoUri: string,\n        private interactiveCredentialOptions?: InteractiveBrowserCredentialInBrowserOptions | InteractiveBrowserCredentialNodeOptions,\n        timeoutMs?: number\n    ) {\n        super(kustoUri, interactiveCredentialOptions?.tenantId, timeoutMs);\n    }\n\n    getCredential(): TokenCredential {\n        return new InteractiveBrowserCredential({\n            ...this.interactiveCredentialOptions,\n            tenantId: this.authorityId,\n            clientId: this.interactiveCredentialOptions?.clientId ?? this.cloudInfo.KustoClientAppId,\n            redirectUri: this.interactiveCredentialOptions?.redirectUri ?? `http://localhost:${this.getRandomPortInRange()}/`,\n        });\n    }\n\n    private getRandomPortInRange() {\n        return Math.floor(Math.random() * (this.MaxPort - this.MinPort) + this.MinPort);\n    }\n\n    context(): Record<string, any> {\n        let base = super.context();\n        if (this.interactiveCredentialOptions?.loginHint) {\n            base = { ...base, loginHint: this.interactiveCredentialOptions?.loginHint };\n        }\n        return base;\n    }\n}\n\n/**\n * MSI Token Provider obtains a token from the MSI endpoint\n * The args parameter is a dictionary conforming with the ManagedIdentityCredential initializer API arguments\n */\nexport class MsiTokenProvider extends AzureIdentityProvider {\n    constructor(kustoUri: string, protected clientId?: string, authorityId?: string, timeoutMs?: number) {\n        super(kustoUri, authorityId, timeoutMs);\n    }\n\n    getCredential(): TokenCredential {\n        return this.clientId ? new ManagedIdentityCredential(this.clientId) : new ManagedIdentityCredential();\n    }\n\n    context(): Record<string, any> {\n        return {\n            ...super.context(),\n            clientId: this.clientId,\n        };\n    }\n}\n\n/**\n * AzCli Token Provider obtains a refresh token from the AzCli cache and uses it to authenticate with MSAL\n */\nexport class AzCliTokenProvider extends AzureIdentityProvider {\n    getCredential(): TokenCredential {\n        return new AzureCliCredential();\n    }\n}\n\n/**\n * Acquire a token from MSAL with username and password\n */\nexport class UserPassTokenProvider extends AzureIdentityProvider {\n    userName: string;\n    password: string;\n    homeAccountId?: string;\n    constructor(kustoUri: string, userName: string, password: string, authorityId: string, timeoutMs?: number) {\n        super(kustoUri, authorityId, timeoutMs);\n        this.userName = userName;\n        this.password = password;\n    }\n\n    getCredential(): TokenCredential {\n        return new UsernamePasswordCredential(this.authorityId!, this.cloudInfo.KustoClientAppId, this.userName, this.password);\n    }\n\n    context(): Record<string, any> {\n        return {\n            ...super.context(),\n            userName: this.userName,\n            homeAccountId: this.homeAccountId,\n        };\n    }\n}\n\n/**\n * Acquire a token from  Device Login flow\n */\nexport class DeviceLoginTokenProvider extends AzureIdentityProvider {\n    constructor(kustoUri: string, private deviceCodeCallback?: (response: DeviceCodeInfo) => void, authorityId?: string, timeoutMs?: number) {\n        super(kustoUri, authorityId, timeoutMs);\n    }\n\n    getCredential(): TokenCredential {\n        return new DeviceCodeCredential({\n            tenantId: this.authorityId,\n            clientId: this.cloudInfo.KustoClientAppId,\n            userPromptCallback: this.deviceCodeCallback,\n        });\n    }\n}\n\n/**\n * Acquire a token from MSAL using application certificate\n * Passing the public certificate is optional and will result in Subject Name & Issuer Authentication\n */\nexport class ApplicationCertificateTokenProvider extends AzureIdentityProvider {\n    constructor(\n        kustoUri: string,\n        private appClientId: string,\n        private certPrivateKey?: string,\n        private certPath?: string,\n        private sendX5c?: boolean,\n        authorityId?: string,\n        timeoutMs?: number\n    ) {\n        super(kustoUri, authorityId!, timeoutMs);\n    }\n\n    getCredential(): TokenCredential {\n        if (this.certPrivateKey) {\n            return new ClientCertificateCredential(\n                this.authorityId!,\n                this.appClientId!,\n                {\n                    certificate: this.certPrivateKey,\n                } as ClientCertificatePEMCertificate,\n                {\n                    sendCertificateChain: this.sendX5c,\n                } as ClientCertificateCredentialOptions\n            );\n        }\n\n        return new ClientCertificateCredential(this.authorityId!, this.appClientId!, this.certPath!, {\n            sendCertificateChain: this.sendX5c,\n        } as ClientCertificateCredentialOptions);\n    }\n\n    context(): Record<string, any> {\n        return {\n            ...super.context(),\n            clientId: this.appClientId,\n            sendX5c: this.sendX5c,\n        };\n    }\n}\n\n/**\n * Acquire a token from MSAL with application id and Key\n */\nexport class ApplicationKeyTokenProvider extends AzureIdentityProvider {\n    constructor(kustoUri: string, private appClientId: string, private appKey: string, authorityId: string, timeoutMs?: number) {\n        super(kustoUri, authorityId, timeoutMs);\n    }\n\n    getCredential(): TokenCredential {\n        return new ClientSecretCredential(\n            this.authorityId!, // The tenant ID in Azure Active Directory\n            this.appClientId, // The app registration client Id in the AAD tenant\n            this.appKey // The app registration secret for the registered application\n        );\n    }\n\n    context(): Record<string, any> {\n        return { ...super.context(), clientId: this.appClientId };\n    }\n}\n"]}