{"version":3,"file":"cloudSettings.js","sourceRoot":"","sources":["../../src/cloudSettings.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport axios from \"axios\";\nimport { isNode } from \"@azure/core-util\";\n\nexport type CloudInfo = {\n    LoginEndpoint: string;\n    LoginMfaRequired: boolean;\n    KustoClientAppId: string;\n    KustoClientRedirectUri: string;\n    KustoServiceResourceId: string;\n    FirstPartyAuthorityUrl: string;\n};\n\n/**\n * This class holds data for all cloud instances, and returns the specific data instance by parsing the dns suffix from a URL\n */\nclass CloudSettings {\n    METADATA_ENDPOINT = \"/v1/rest/auth/metadata\";\n    defaultCloudInfo: CloudInfo = {\n        LoginEndpoint: process.env.AadAuthorityUri || \"https://login.microsoftonline.com\",\n        LoginMfaRequired: false,\n        KustoClientAppId: \"db662dc1-0cfe-4e1c-a843-19a68e65be58\",\n        KustoClientRedirectUri: \"https://microsoft/kustoclient\",\n        KustoServiceResourceId: \"https://kusto.kusto.windows.net\",\n        FirstPartyAuthorityUrl: \"https://login.microsoftonline.com/f8cdef31-a31e-4b4a-93e4-5f571e91255a\",\n    };\n    cloudCache: { [kustoUri: string]: CloudInfo } = {};\n\n    writeToCache(url: string, info?: CloudInfo) {\n        this.cloudCache[this.normalizeUrl(url)] = info ?? this.defaultCloudInfo;\n    }\n\n    getFromCache = (kustoUri: string) => this.cloudCache[this.normalizeUrl(kustoUri)];\n\n    deleteFromCache = (kustoUri: string) => delete this.cloudCache[this.normalizeUrl(kustoUri)];\n\n    async getCloudInfoForCluster(kustoUri: string): Promise<CloudInfo> {\n        kustoUri = this.normalizeUrl(kustoUri);\n        if (kustoUri in this.cloudCache) {\n            return this.cloudCache[kustoUri];\n        }\n\n        try {\n            const response = await axios.get<{ AzureAD: CloudInfo | undefined }>(kustoUri + this.METADATA_ENDPOINT, {\n                headers: {\n                    \"Cache-Control\": \"no-cache\",\n                    // Disable caching - it's being cached in memory (Service returns max-age).\n                    // The original motivation for this is due to a CORS issue in Ibiza due to a dynamic subdomain.\n                    // The first dynamic subdomain is attached to the cache and for some reason isn't invalidated\n                    // when there is a new subdomain. It causes the request failure due to CORS.\n                    // Example:\n                    // Access to XMLHttpRequest at 'https://safrankecc.canadacentral.kusto.windows.net/v1/rest/auth/metadata' from origin\n                    // 'https://sandbox-46-11.reactblade.portal.azure.net' has been blocked by CORS policy: The 'Access-Control-Allow-Origin' header has a value\n                    // 'https://sandbox-46-10.reactblade.portal.azure.net' that is not equal to the supplied origin.\n                },\n                maxRedirects: 0,\n            });\n            if (response.status === 200) {\n                this.cloudCache[kustoUri] = response.data.AzureAD || this.defaultCloudInfo;\n            } else {\n                throw new Error(`Kusto returned an invalid cloud metadata response - ${response}`);\n            }\n        } catch (ex) {\n            if (axios.isAxiosError(ex)) {\n                // Axios library has a bug in browser, not propagating the status code, see: https://github.com/axios/axios/issues/5330\n                if ((ex.response?.status === 404 && isNode) || (ex.code === axios.AxiosError.ERR_NETWORK && !isNode)) {\n                    // For now as long not all proxies implement the metadata endpoint, if no endpoint exists return public cloud data\n                    this.cloudCache[kustoUri] = this.defaultCloudInfo;\n                } else {\n                    throw new Error(`Failed to get cloud info for cluster ${kustoUri} - ${ex}`);\n                }\n            }\n        }\n        return this.cloudCache[kustoUri];\n    }\n\n    private normalizeUrl(kustoUri: string) {\n        const url = new URL(kustoUri);\n        const urlString = url.toString();\n        if (urlString.endsWith(\"/\")) {\n            return urlString.slice(0, urlString.length - 1);\n        }\n        return urlString;\n    }\n\n    static getAuthorityUri(cloudInfo: CloudInfo, authorityId?: string): string {\n        return cloudInfo.LoginEndpoint + \"/\" + (authorityId || \"organizations\");\n    }\n}\n\nconst cloudSettings = new CloudSettings();\nexport { cloudSettings as CloudSettings };\nexport default cloudSettings;\n"]}