{"version":3,"file":"ingestClient.browser.js","sourceRoot":"","sources":["../../src/ingestClient.browser.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAIlC,+CAAmF;AACnF,qEAA0D;AAI1D,yDAA2D;AAE3D,MAAa,iBAAkB,SAAQ,wCAAqB;IACxD,YAAY,IAA2C,EAAE,YAAuC;QAC5F,KAAK,CAAC,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAAC,IAA2B,EAAE,mBAA8C;QAC5F,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,MAAM,UAAU,GAAG,IAAI,YAAY,uCAAc,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,uCAAc,CAAC,IAAI,CAAC,CAAC;QAEpF,MAAM,IAAI,GAAG,UAAU,CAAC,IAAY,CAAC;QACrC,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;QAExD,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YACtD,UAAU,CAAC,OAAO,EAAE;YACpB,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,IAAA,8BAAgB,EAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SAC/E,CAAC,CAAC;QAEH,MAAM,eAAe,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QAC/C,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,4BAAc,CAAC,eAAe,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,CAAC;IAC/G,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,gBAAgB,CAAC,MAAsC,EAAE,mBAA8C;QACzG,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;QACxD,MAAM,UAAU,GAAqB,MAAM,YAAY,8BAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,8BAAgB,CAAC,MAAM,CAAC,CAAC;QAChH,MAAM,QAAQ,GAAG,IAAA,8BAAgB,EAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAErD,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAChF,MAAM,eAAe,CAAC,UAAU,CAAC,UAAU,CAAC,MAAqB,CAAC,CAAC;QACnE,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,4BAAc,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,mBAAmB;IACnG,CAAC;CACJ;AArCD,8CAqCC;AAED,kBAAe,iBAAiB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { KustoConnectionStringBuilder } from \"azure-kusto-data\";\n\nimport { BlobDescriptor, generateBlobName, StreamDescriptor } from \"./descriptors\";\nimport { FileDescriptor } from \"./fileDescriptor.browser\";\nimport { QueueSendMessageResponse } from \"@azure/storage-queue\";\n\nimport { IngestionPropertiesInput } from \"./ingestionProperties\";\nimport { KustoIngestClientBase } from \"./ingestClientBase\";\n\nexport class KustoIngestClient extends KustoIngestClientBase {\n    constructor(kcsb: string | KustoConnectionStringBuilder, defaultProps?: IngestionPropertiesInput) {\n        super(kcsb, defaultProps, true);\n    }\n\n    /**\n     * Use string for Node.js and Blob in browser\n     */\n    async ingestFromFile(file: Blob | FileDescriptor, ingestionProperties?: IngestionPropertiesInput): Promise<QueueSendMessageResponse> {\n        this.ensureOpen();\n        const descriptor = file instanceof FileDescriptor ? file : new FileDescriptor(file);\n\n        const blob = descriptor.file as Blob;\n        const props = this._getMergedProps(ingestionProperties);\n\n        const [fileToUpload, blockBlobClient] = await Promise.all([\n            descriptor.prepare(),\n            this.resourceManager.getBlockBlobClient(generateBlobName(descriptor, props)),\n        ]);\n\n        await blockBlobClient.uploadData(fileToUpload);\n        return this.ingestFromBlob(new BlobDescriptor(blockBlobClient.url, blob.size, descriptor.sourceId), props);\n    }\n\n    /**\n     * Use Readable for Node.js and ArrayBuffer in browser\n     */\n    async ingestFromStream(stream: ArrayBuffer | StreamDescriptor, ingestionProperties?: IngestionPropertiesInput): Promise<QueueSendMessageResponse> {\n        this.ensureOpen();\n        const props = this._getMergedProps(ingestionProperties);\n        const descriptor: StreamDescriptor = stream instanceof StreamDescriptor ? stream : new StreamDescriptor(stream);\n        const blobName = generateBlobName(descriptor, props);\n\n        const blockBlobClient = await this.resourceManager.getBlockBlobClient(blobName);\n        await blockBlobClient.uploadData(descriptor.stream as ArrayBuffer);\n        return this.ingestFromBlob(new BlobDescriptor(blockBlobClient.url), props); // descriptor.size?\n    }\n}\n\nexport default KustoIngestClient;\n"]}