{"version":3,"file":"resourceManager.js","sourceRoot":"","sources":["../../src/resourceManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Client, KustoDataErrors, TimeUtils } from \"azure-kusto-data\";\nimport { ExponentialRetry } from \"./retry.js\";\nimport { ContainerClient } from \"@azure/storage-blob\";\nimport { TableClient } from \"@azure/data-tables\";\nimport { RankedStorageAccountSet } from \"./rankedStorageAccountSet.js\";\nimport { QueueClient } from \"@azure/storage-queue\";\n\nconst ATTEMPT_COUNT = 4;\n\nexport enum ResourceType {\n    Queue,\n    Container,\n    Table,\n}\n\nexport class ResourceURI {\n    constructor(\n        readonly uri: string,\n        readonly accountName: string,\n        readonly resourceType: ResourceType,\n    ) {}\n}\n\nexport class IngestClientResources {\n    constructor(\n        readonly securedReadyForAggregationQueues: ResourceURI[] | null = null,\n        readonly failedIngestionsQueues: ResourceURI[] | null = null,\n        readonly successfulIngestionsQueues: ResourceURI[] | null = null,\n        readonly containers: ResourceURI[] | null = null,\n        readonly statusTables: ResourceURI[] | null = null,\n    ) {}\n\n    valid() {\n        const resources = [this.securedReadyForAggregationQueues, this.failedIngestionsQueues, this.failedIngestionsQueues, this.containers, this.statusTables];\n        return resources.reduce((prev, current) => !!(prev && current), true);\n    }\n}\n\nexport class ResourceManager {\n    public readonly refreshPeriod: number;\n    public refreshPeriodOnError: number;\n    public ingestClientResources: IngestClientResources | null;\n    public ingestClientResourcesLastUpdate: number | null;\n    public authorizationContext: string | null;\n    public authorizationContextLastUpdate: number | null;\n\n    private baseSleepTimeSecs = 1;\n    private baseJitterSecs = 1;\n    private rankedStorageAccountSet: RankedStorageAccountSet;\n\n    constructor(\n        readonly kustoClient: Client,\n        readonly isBrowser: boolean = false,\n    ) {\n        this.refreshPeriod = TimeUtils.toMilliseconds(1, 0, 0);\n        this.refreshPeriodOnError = TimeUtils.toMilliseconds(0, 10, 0);\n\n        this.ingestClientResources = null;\n        this.ingestClientResourcesLastUpdate = null;\n\n        this.authorizationContext = null;\n        this.authorizationContextLastUpdate = null;\n\n        this.rankedStorageAccountSet = new RankedStorageAccountSet();\n    }\n\n    async refreshIngestClientResources(): Promise<IngestClientResources> {\n        const error = await this.tryRefresh(false);\n        if (!this.ingestClientResources) {\n            throw new Error(`Failed to fetch ingestion resources from service.  ${error?.message}.\\n ${error?.stack}`);\n        }\n\n        return this.ingestClientResources;\n    }\n\n    async getIngestClientResourcesFromService(): Promise<IngestClientResources> {\n        const retry = new ExponentialRetry(ATTEMPT_COUNT, this.baseSleepTimeSecs, this.baseJitterSecs);\n        while (retry.shouldTry()) {\n            try {\n                const cmd = `.get ingestion resources ${this.isBrowser ? `with (EnableBlobCors='true', EnableQueueCors='true', EnableTableCors='true')` : \"\"}`;\n                const response = await this.kustoClient.execute(\"NetDefaultDB\", cmd);\n                const table = response.primaryResults[0];\n                const resoures = new IngestClientResources(\n                    this.getResourceByName(table, \"SecuredReadyForAggregationQueue\", ResourceType.Queue),\n                    this.getResourceByName(table, \"FailedIngestionsQueue\", ResourceType.Queue),\n                    this.getResourceByName(table, \"SuccessfulIngestionsQueue\", ResourceType.Queue),\n                    this.getResourceByName(table, \"TempStorage\", ResourceType.Container),\n                    this.getResourceByName(table, \"IngestionsStatusTable\", ResourceType.Table),\n                );\n\n                if (!resoures.valid()) {\n                    throw new Error(\"Unexpected error occured - fetched data returned missing resource\");\n                }\n\n                return resoures;\n            } catch (error: unknown) {\n                if (!(error instanceof KustoDataErrors.ThrottlingError)) {\n                    throw error;\n                }\n                await retry.backoff();\n            }\n        }\n        throw new Error(`Failed to get ingestion resources from server - the request was throttled ${ATTEMPT_COUNT} times.`);\n    }\n\n    getResourceByName(table: { rows: () => any }, resourceName: string, resourceType: ResourceType): ResourceURI[] {\n        const result: ResourceURI[] = [];\n        for (const row of table.rows()) {\n            const typedRow = row as {\n                ResourceTypeName: string;\n                StorageRoot: string;\n            };\n            if (typedRow.ResourceTypeName === resourceName) {\n                let accountName = \"\";\n                if (resourceType === ResourceType.Queue) {\n                    accountName = new QueueClient(typedRow.StorageRoot).accountName;\n                } else if (resourceType === ResourceType.Container) {\n                    accountName = new ContainerClient(typedRow.StorageRoot).accountName;\n                }\n                result.push(new ResourceURI(typedRow.StorageRoot, accountName, resourceType));\n            }\n        }\n        return result;\n    }\n\n    pupulateStorageAccounts(): void {\n        if (this.ingestClientResources == null) {\n            return;\n        }\n\n        // containers\n        const accounts = new Set<string>();\n        if (this.ingestClientResources.containers != null) {\n            for (const container of this.ingestClientResources.containers) {\n                accounts.add(container.accountName);\n            }\n        }\n        // queues\n        if (this.ingestClientResources.securedReadyForAggregationQueues != null) {\n            for (const queue of this.ingestClientResources.securedReadyForAggregationQueues) {\n                accounts.add(queue.accountName);\n            }\n        }\n\n        for (const account of accounts) {\n            this.rankedStorageAccountSet.registerStorageAccount(account);\n        }\n    }\n\n    groupResourcesByStorageAccount(resources: ResourceURI[]): Map<string, ResourceURI[]> {\n        const result = new Map<string, ResourceURI[]>();\n        for (const resource of resources) {\n            if (!result.has(resource.accountName)) {\n                result.set(resource.accountName, []);\n            }\n            result.get(resource.accountName)?.push(resource);\n        }\n        return result;\n    }\n\n    getRankedAndShuffledStorageAccounts(resources: ResourceURI[]): ResourceURI[][] {\n        const resourcesByAccount = this.groupResourcesByStorageAccount(resources);\n        const rankedStorageAccounts = this.rankedStorageAccountSet.getRankedShuffledAccounts();\n        const result = new Array<ResourceURI[]>();\n        for (const account of rankedStorageAccounts) {\n            const accountName = account.getAccountName();\n            if (resourcesByAccount.has(accountName)) {\n                result.push(resourcesByAccount.get(accountName) as ResourceURI[]);\n            }\n        }\n        return result;\n    }\n\n    getRoundRobinRankedAndShuffledResources(resources: ResourceURI[]): ResourceURI[] {\n        const rankedAccounts = this.getRankedAndShuffledStorageAccounts(resources);\n        const result = new Array<ResourceURI>();\n        let index = 0;\n        while (result.length < resources.length) {\n            const account = rankedAccounts[index % rankedAccounts.length];\n            if (account.length > 0) {\n                result.push(account.shift() as ResourceURI);\n            }\n            index++;\n        }\n        return result;\n    }\n\n    async refreshAuthorizationContext(): Promise<string> {\n        const error = await this.tryRefresh(true);\n\n        if (this.authorizationContext == null) {\n            throw new Error(`Failed to fetch Authorization context from service.  ${error?.message}.\\n ${error?.stack}`);\n        }\n\n        return this.authorizationContext;\n    }\n\n    async tryRefresh(isAuthContextFetch: boolean): Promise<Error | null> {\n        const resource = isAuthContextFetch ? this.authorizationContext?.trim() : this.ingestClientResources;\n        const lastRefresh = isAuthContextFetch ? this.authorizationContextLastUpdate : this.ingestClientResourcesLastUpdate;\n        const now = Date.now();\n        let error: Error | null = null;\n        if (!resource || !lastRefresh || lastRefresh + this.refreshPeriod <= now) {\n            try {\n                if (isAuthContextFetch) {\n                    this.authorizationContext = await this.getAuthorizationContextFromService();\n                    this.authorizationContextLastUpdate = now;\n                } else {\n                    this.ingestClientResources = await this.getIngestClientResourcesFromService();\n                    this.ingestClientResourcesLastUpdate = now;\n                    this.pupulateStorageAccounts();\n                }\n            } catch (e) {\n                error = e as Error;\n            }\n        }\n\n        return error;\n    }\n\n    async getAuthorizationContextFromService() {\n        const retry = new ExponentialRetry(ATTEMPT_COUNT, this.baseSleepTimeSecs, this.baseJitterSecs);\n        while (retry.shouldTry()) {\n            try {\n                const response = await this.kustoClient.execute(\"NetDefaultDB\", \".get kusto identity token\");\n                const next = response.primaryResults[0].rows().next();\n                if (next.done) {\n                    throw new Error(\"Failed to get authorization context - got empty results\");\n                }\n                return next.value.toJSON<{ AuthorizationContext: string }>().AuthorizationContext;\n            } catch (error: unknown) {\n                if (!(error instanceof KustoDataErrors.ThrottlingError)) {\n                    throw error;\n                }\n                await retry.backoff();\n            }\n        }\n        throw new Error(`Failed to get identity token from server - the request was throttled ${ATTEMPT_COUNT} times.`);\n    }\n\n    async getIngestionQueues(): Promise<ResourceURI[] | null> {\n        const queues = (await this.refreshIngestClientResources()).securedReadyForAggregationQueues;\n        return queues ? this.getRoundRobinRankedAndShuffledResources(queues) : null;\n    }\n\n    async getFailedIngestionsQueues(): Promise<ResourceURI[] | null> {\n        return (await this.refreshIngestClientResources()).failedIngestionsQueues;\n    }\n\n    async getSuccessfulIngestionsQueues(): Promise<ResourceURI[] | null> {\n        return (await this.refreshIngestClientResources()).successfulIngestionsQueues;\n    }\n\n    async getContainers(): Promise<ResourceURI[] | null> {\n        const containers = (await this.refreshIngestClientResources()).containers;\n        return containers ? this.getRoundRobinRankedAndShuffledResources(containers) : null;\n    }\n\n    async getAuthorizationContext(): Promise<string> {\n        return this.refreshAuthorizationContext();\n    }\n\n    async getStatusTables(): Promise<ResourceURI[] | null> {\n        return (await this.refreshIngestClientResources()).statusTables;\n    }\n\n    async createStatusTable() {\n        const statusTables = await this.getStatusTables();\n        if (!statusTables) {\n            throw new Error(\"Failed to get status table\");\n        }\n\n        return createStatusTableClient(statusTables![0].uri);\n    }\n\n    close(): void {\n        this.kustoClient.close();\n    }\n\n    reportResourceUsageResult(accountName: string, success: boolean): void {\n        this.rankedStorageAccountSet.logResultToAccount(accountName, success);\n    }\n}\n\nexport const createStatusTableClient = (uri: string): TableClient => {\n    const tableUrl = new URL(uri);\n    const origin = tableUrl.origin;\n    const sasToken = tableUrl.search;\n    const tableName = tableUrl.pathname.replace(\"/\", \"\");\n    return new TableClient(origin + sasToken, tableName);\n};\n\nexport default ResourceManager;\n"]}