{"version":3,"file":"statusQ.js","sourceRoot":"","sources":["../../src/statusQ.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { PeekedMessageItem, QueueClient } from \"@azure/storage-queue\";\nimport { ResourceURI } from \"./resourceManager\";\nimport { StatusMessage } from \"./status\";\n\nclass QueueDetails {\n    constructor(readonly name: string, readonly service: QueueClient) {}\n}\n\nconst shuffle = <T>(a: T[]): T[] => {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = a[j];\n        a[j] = a[i];\n        a[i] = temp;\n    }\n\n    return a;\n};\n\ninterface PeekParams {\n    raw: boolean;\n}\n\ninterface PopParams {\n    raw: boolean;\n    remove: boolean;\n}\n\ntype Message = PeekedMessageItem | StatusMessage;\n\nexport class StatusQueue {\n    constructor(readonly getQueuesFunc: () => Promise<ResourceURI[]>, readonly messageCls: typeof StatusMessage) {}\n\n    _getQServices(queuesDetails: ResourceURI[]) {\n        return queuesDetails.map((q) => {\n            const fullUri = q.uri;\n            if (!fullUri) {\n                throw new Error(\"Empty or null connection string\");\n            }\n            // chop off sas\n            const indexOfSas = q.uri.indexOf(\"?\");\n            const name = indexOfSas > 0 ? q.uri.substring(0, indexOfSas) : q.uri;\n            return new QueueDetails(name, new QueueClient(fullUri));\n        });\n    }\n\n    async isEmpty() {\n        const result = await this.peek(1, { raw: true });\n        return !result || result.length === 0;\n    }\n\n    decodeContent(content: string) {\n        return Buffer.from(content, \"base64\").toString(\"ascii\");\n    }\n\n    deserializeMessage(m: PeekedMessageItem): StatusMessage {\n        return new this.messageCls(this.decodeContent(m.messageText), null, null);\n    }\n\n    async _peek(qs: QueueDetails[], n: number, options: PeekParams | null): Promise<{ result: Message[]; nonEmptyQs: QueueDetails[]; done: boolean }> {\n        const result: Message[] = [];\n        const nonEmptyQs: QueueDetails[] = [];\n\n        for (const q of qs) {\n            const response = await q.service.peekMessages();\n            const messages = response.peekedMessageItems;\n\n            if (messages && messages.length > 0) {\n                nonEmptyQs.push(q);\n            }\n\n            for (const m of messages) {\n                if (m && Object.keys(m).length > 0) {\n                    result.push(options && options.raw ? m : this.deserializeMessage(m));\n\n                    if (result.length === n) {\n                        return { done: true, nonEmptyQs, result };\n                    }\n                }\n            }\n        }\n        return { done: nonEmptyQs.length === 0, nonEmptyQs, result };\n    }\n\n    async peek(n = 1, options: PeekParams | null = null): Promise<Message[]> {\n        const queues = await this.getQueuesFunc();\n        const qServices: QueueDetails[] = shuffle(this._getQServices(queues));\n        const perQ = qServices.length > 1 ? Math.floor(n / qServices.length) : qServices.length;\n\n        // First, iterate evenly and randomly on status queues\n        const partial = await this._peek(qServices, perQ, options);\n\n        if (partial.done) {\n            return partial.result;\n        }\n        const messagesLeftToPeek = n - partial.result.length;\n\n        // In case queues are uneven, iterate again. This time, request for all n messages and trim\n        return (await this._peek(partial.nonEmptyQs, messagesLeftToPeek, options)).result;\n    }\n\n    async _pop(\n        qs: QueueDetails[],\n        n: number,\n        options: PopParams | null\n    ): Promise<{ result: Message[] & { nonEmptyQs?: QueueDetails[] }; nonEmptyQs: any[]; done: boolean }> {\n        const nonEmptyQs: any[] = [];\n        const result = [];\n\n        for (const q of qs) {\n            const response = await q.service.receiveMessages({ numOfMessages: n });\n            const messages = response.receivedMessageItems;\n            for (const m of messages) {\n                if (m && Object.keys(m).length > 0) {\n                    result.push(options && options.raw ? m : this.deserializeMessage(m));\n\n                    if (!(options && !options.remove)) {\n                        await q.service.deleteMessage(m.messageId, m.popReceipt);\n                    }\n                    if (result.length === n) {\n                        return { done: true, nonEmptyQs, result };\n                    }\n                }\n            }\n        }\n\n        return { done: nonEmptyQs.length === 0, nonEmptyQs, result };\n    }\n\n    async pop(n = 1, options: PopParams | null = null): Promise<Message[]> {\n        const queues = await this.getQueuesFunc();\n        const qServices = shuffle(this._getQServices(queues));\n        const perQ = qServices.length > 1 ? Math.floor(n / qServices.length) : qServices.length;\n\n        // First, iterate evenly and randomly on status queues\n        const partial = await this._pop(qServices, perQ, options);\n        if (partial.done) {\n            return partial.result;\n        }\n\n        const messagesLeftToPop = n - partial.result.length;\n\n        // In case queues are uneven, iterate again. This time, request for all n messages and trim\n        const final = await this._pop(partial.result.nonEmptyQs ?? [], messagesLeftToPop, options);\n        return partial.result.concat(final.result);\n    }\n}\n"]}