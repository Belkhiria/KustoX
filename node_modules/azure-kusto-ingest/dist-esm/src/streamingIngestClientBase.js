"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.KustoStreamingIngestClientBase = void 0;
const descriptors_1 = require("./descriptors");
const abstractKustoClient_1 = require("./abstractKustoClient");
const azure_kusto_data_1 = require("azure-kusto-data");
class KustoStreamingIngestClientBase extends abstractKustoClient_1.AbstractKustoClient {
    constructor(kcsb, defaultProps) {
        super(defaultProps);
        this.kustoClient = new azure_kusto_data_1.Client(kcsb);
        this.defaultDatabase = this.kustoClient.defaultDatabase;
    }
    async ingestFromBlob(blob, ingestionProperties, clientRequestId) {
        var _a;
        const props = this._getMergedProps(ingestionProperties);
        const descriptor = blob instanceof descriptors_1.BlobDescriptor ? blob : new descriptors_1.BlobDescriptor(blob);
        // No need to check blob size if it was given to us that it's not empty
        await descriptor.fillSize();
        return await this.kustoClient.executeStreamingIngest(props.database, props.table, undefined, props.format, (_a = props.ingestionMappingReference) !== null && _a !== void 0 ? _a : null, descriptor.path, clientRequestId);
    }
    close() {
        if (!this._isClosed) {
            this.kustoClient.close();
        }
        super.close();
    }
}
exports.KustoStreamingIngestClientBase = KustoStreamingIngestClientBase;
//# sourceMappingURL=streamingIngestClientBase.js.map