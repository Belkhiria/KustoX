"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.readableToStream = exports.tryStreamToArray = exports.tryFileToBuffer = exports.fileToStream = void 0;
const descriptors_1 = require("./descriptors");
const fileToStream = async (file) => {
    const streamFs = await file.file.arrayBuffer();
    const compressionType = file.zipped ? descriptors_1.CompressionType.GZIP : descriptors_1.CompressionType.None;
    return new descriptors_1.StreamDescriptor(streamFs, file.sourceId, compressionType);
};
exports.fileToStream = fileToStream;
const tryFileToBuffer = async (file) => {
    return await (0, exports.fileToStream)(file);
};
exports.tryFileToBuffer = tryFileToBuffer;
// NOT USED
const tryStreamToArray = async (stream) => {
    return Promise.resolve(stream);
};
exports.tryStreamToArray = tryStreamToArray;
// NOT USED
const readableToStream = (stream) => {
    return stream;
};
exports.readableToStream = readableToStream;
//# sourceMappingURL=streamUtils.browser.js.map