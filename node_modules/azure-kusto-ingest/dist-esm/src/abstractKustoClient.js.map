{"version":3,"file":"abstractKustoClient.js","sourceRoot":"","sources":["../../src/abstractKustoClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,mBAAmB,EAA4B,MAAM,0BAA0B,CAAC;AAEzF,OAAO,IAAI,MAAM,OAAO,CAAC;AAEzB,MAAM,aAAa,GAAG,SAAS,CAAC;AAChC,MAAM,eAAe,GAAG,KAAK,CAAC;AAE9B,MAAM,OAAgB,mBAAmB;IAKrC,YAAsB,YAAsC;QAFlD,cAAS,GAAY,KAAK,CAAC;QAGjC,IAAI,CAAC,YAAY,EAAE,CAAC;YAChB,IAAI,CAAC,YAAY,GAAG,IAAI,mBAAmB,CAAC,EAAE,CAAC,CAAC;QACpD,CAAC;aAAM,IAAI,CAAC,CAAC,YAAY,YAAY,mBAAmB,CAAC,EAAE,CAAC;YACxD,IAAI,CAAC,YAAY,GAAG,IAAI,mBAAmB,CAAC,YAAY,CAAC,CAAC;QAC9D,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,YAAY,GAAG,IAAI,mBAAmB,CAAC,YAAY,CAAC,CAAC;QAC9D,CAAC;IACL,CAAC;IAED,eAAe,CAAC,aAAwC;QACpD,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QACrD,KAAK,CAAC,WAAW,EAAE,CAAC;QACpB,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YAClB,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC;QAC1C,CAAC;QAED,KAAK,CAAC,QAAQ,EAAE,CAAC;QACjB,OAAO,KAAK,CAAC;IACjB,CAAC;IAQM,KAAK;QACR,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC1B,CAAC;IAES,UAAU;QAChB,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACxC,CAAC;IACL,CAAC;IAED,oBAAoB,CAAC,UAAmB;QACpC,IAAI,CAAC,UAAU,IAAI,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAE,CAAC;YAC3F,OAAO,UAAU,CAAC;QACtB,CAAC;QACD,OAAO,UAAU,CAAC,OAAO,CAAC,eAAe,EAAE,eAAe,GAAG,aAAa,CAAC,CAAC;IAChF,CAAC;IAED,gBAAgB,CAAC,UAAmB;QAChC,IAAI,UAAU,IAAI,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE,CAAC;YACnD,OAAO,UAAU,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;QACjD,CAAC;QACD,OAAO,UAAU,CAAC;IACtB,CAAC;IAED,kBAAkB,CAAC,UAAkB;QACjC,IAAI,CAAC;YACD,MAAM,SAAS,GAAG,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC;YACtC,MAAM,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC;YACrC,IAAI,CAAC,SAAS,EAAE,CAAC;gBACb,OAAO,IAAI,CAAC;YAChB,CAAC;YACD,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;YAC9B,MAAM,YAAY,GAAG,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YACrD,OAAO,YAAY,IAAI,KAAK,IAAI,SAAS,CAAC,WAAW,EAAE,KAAK,8BAA8B,CAAC;QAC/F,CAAC;QAAC,WAAM,CAAC;YACL,OAAO,KAAK,CAAC;QACjB,CAAC;IACL,CAAC;CACJ","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { IngestionProperties, IngestionPropertiesInput } from \"./ingestionProperties.js\";\nimport { StreamDescriptor, FileDescriptorBase, BlobDescriptor } from \"./descriptors.js\";\nimport isIP from \"is-ip\";\n\nconst INGEST_PREFIX = \"ingest-\";\nconst PROTOCOL_SUFFIX = \"://\";\n\nexport abstract class AbstractKustoClient {\n    public defaultProps: IngestionProperties;\n    public defaultDatabase?: string;\n    protected _isClosed: boolean = false;\n\n    protected constructor(defaultProps: IngestionPropertiesInput) {\n        if (!defaultProps) {\n            this.defaultProps = new IngestionProperties({});\n        } else if (!(defaultProps instanceof IngestionProperties)) {\n            this.defaultProps = new IngestionProperties(defaultProps);\n        } else {\n            this.defaultProps = new IngestionProperties(defaultProps);\n        }\n    }\n\n    _getMergedProps(newProperties?: IngestionPropertiesInput): IngestionProperties {\n        const props = this.defaultProps.merge(newProperties);\n        props.setDefaults();\n        if (!props.database) {\n            props.database = this.defaultDatabase;\n        }\n\n        props.validate();\n        return props;\n    }\n\n    abstract ingestFromStream(stream: StreamDescriptor, ingestionProperties: IngestionPropertiesInput): Promise<any>;\n\n    abstract ingestFromFile(file: FileDescriptorBase | string | Blob, ingestionProperties: IngestionPropertiesInput): Promise<any>;\n\n    abstract ingestFromBlob(blob: string | BlobDescriptor, ingestionProperties?: IngestionPropertiesInput): Promise<any>;\n\n    public close(): void {\n        this._isClosed = true;\n    }\n\n    protected ensureOpen() {\n        if (this._isClosed) {\n            throw new Error(\"Client is closed\");\n        }\n    }\n\n    getIngestionEndpoint(clusterUrl?: string): string | undefined {\n        if (!clusterUrl || clusterUrl.includes(INGEST_PREFIX) || this.isReservedHostname(clusterUrl)) {\n            return clusterUrl;\n        }\n        return clusterUrl.replace(PROTOCOL_SUFFIX, PROTOCOL_SUFFIX + INGEST_PREFIX);\n    }\n\n    getQueryEndpoint(clusterUrl?: string): string | undefined {\n        if (clusterUrl && clusterUrl.includes(INGEST_PREFIX)) {\n            return clusterUrl.replace(INGEST_PREFIX, \"\");\n        }\n        return clusterUrl;\n    }\n\n    isReservedHostname(clusterUrl: string): boolean {\n        try {\n            const parsedUrl = new URL(clusterUrl);\n            const authority = parsedUrl.hostname;\n            if (!authority) {\n                return true;\n            }\n            const is_ip = isIP(authority);\n            const is_localhost = authority.includes(\"localhost\");\n            return is_localhost || is_ip || authority.toLowerCase() === \"onebox.dev.kusto.windows.net\";\n        } catch {\n            return false;\n        }\n    }\n}\n"]}