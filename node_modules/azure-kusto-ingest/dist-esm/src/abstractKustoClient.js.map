{"version":3,"file":"abstractKustoClient.js","sourceRoot":"","sources":["../../src/abstractKustoClient.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,+DAAsF;AAGtF,MAAsB,mBAAmB;IAKrC,YAAsB,YAAsC;QAFlD,cAAS,GAAY,KAAK,CAAC;QAGjC,IAAI,CAAC,YAAY,EAAE;YACf,IAAI,CAAC,YAAY,GAAG,IAAI,yCAAmB,CAAC,EAAE,CAAC,CAAC;SACnD;aAAM,IAAI,CAAC,CAAC,YAAY,YAAY,yCAAmB,CAAC,EAAE;YACvD,IAAI,CAAC,YAAY,GAAG,IAAI,yCAAmB,CAAC,YAAY,CAAC,CAAC;SAC7D;aAAM;YACH,IAAI,CAAC,YAAY,GAAG,IAAI,yCAAmB,CAAC,YAAY,CAAC,CAAC;SAC7D;IACL,CAAC;IAED,eAAe,CAAC,aAAwC;QACpD,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QACrD,KAAK,CAAC,WAAW,EAAE,CAAC;QACpB,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACjB,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC;SACzC;QAED,KAAK,CAAC,QAAQ,EAAE,CAAC;QACjB,OAAO,KAAK,CAAC;IACjB,CAAC;IAQM,KAAK;QACR,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC1B,CAAC;IAES,UAAU;QAChB,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SACvC;IACL,CAAC;CACJ;AAzCD,kDAyCC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { IngestionProperties, IngestionPropertiesInput } from \"./ingestionProperties\";\nimport { StreamDescriptor, FileDescriptorBase, BlobDescriptor } from \"./descriptors\";\n\nexport abstract class AbstractKustoClient {\n    public defaultProps: IngestionProperties;\n    public defaultDatabase?: string;\n    protected _isClosed: boolean = false;\n\n    protected constructor(defaultProps: IngestionPropertiesInput) {\n        if (!defaultProps) {\n            this.defaultProps = new IngestionProperties({});\n        } else if (!(defaultProps instanceof IngestionProperties)) {\n            this.defaultProps = new IngestionProperties(defaultProps);\n        } else {\n            this.defaultProps = new IngestionProperties(defaultProps);\n        }\n    }\n\n    _getMergedProps(newProperties?: IngestionPropertiesInput): IngestionProperties {\n        const props = this.defaultProps.merge(newProperties);\n        props.setDefaults();\n        if (!props.database) {\n            props.database = this.defaultDatabase;\n        }\n\n        props.validate();\n        return props;\n    }\n\n    abstract ingestFromStream(stream: StreamDescriptor, ingestionProperties: IngestionPropertiesInput): Promise<any>;\n\n    abstract ingestFromFile(file: FileDescriptorBase | string | Blob, ingestionProperties: IngestionPropertiesInput): Promise<any>;\n\n    abstract ingestFromBlob(blob: string | BlobDescriptor, ingestionProperties?: IngestionPropertiesInput): Promise<any>;\n\n    public close(): void {\n        this._isClosed = true;\n    }\n\n    protected ensureOpen() {\n        if (this._isClosed) {\n            throw new Error(\"Client is closed\");\n        }\n    }\n}\n"]}