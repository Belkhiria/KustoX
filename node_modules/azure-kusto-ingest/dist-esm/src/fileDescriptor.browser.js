"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileDescriptor = void 0;
const pako_1 = __importDefault(require("pako"));
const descriptors_1 = require("./descriptors");
class FileDescriptor extends descriptors_1.AbstractDescriptor {
    constructor(file, sourceId = null, size = null, compressionType = descriptors_1.CompressionType.None, extension, name) {
        super(sourceId);
        this.file = file;
        this.extension = extension;
        this.name = name;
        this.compressionType = compressionType;
        this.size = size || file.size;
        this.zipped = compressionType !== descriptors_1.CompressionType.None || this.extension === ".gz" || this.extension === ".zip";
    }
    async prepare() {
        if (!this.zipped) {
            try {
                const gzipped = pako_1.default.gzip(await this.file.arrayBuffer());
                return new Blob([gzipped]);
            }
            catch (e) {
                // Ignore - return the file itself
            }
        }
        return this.file;
    }
    async cleanup() {
        if (this.cleanupTmp) {
            await this.cleanupTmp();
        }
    }
    getCompressionSuffix() {
        return this.compressionType ? `.${this.compressionType}` : ".gz";
    }
}
exports.FileDescriptor = FileDescriptor;
//# sourceMappingURL=fileDescriptor.browser.js.map