{"version":3,"file":"ingestClientBase.js","sourceRoot":"","sources":["../../src/ingestClientBase.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;;;;AAElC,uDAAuF;AAEvF,+CAA+C;AAE/C,wEAAgD;AAEhD,4EAAoD;AAEpD,wDAA6E;AAG7E,+DAA4D;AAE5D,MAAsB,qBAAsB,SAAQ,yCAAmB;IAGnE,YAAY,IAA2C,EAAE,YAAuC,EAAE,SAAmB;QACjH,KAAK,CAAC,YAAY,CAAC,CAAC;QACpB,MAAM,WAAW,GAAG,IAAI,yBAAW,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,IAAI,yBAAe,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QACnE,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,IAA6B,EAAE,mBAA8C;QAC9F,IAAI,CAAC,UAAU,EAAE,CAAC;QAElB,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;QAExD,MAAM,UAAU,GAAG,IAAI,YAAY,4BAAc,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,4BAAc,CAAC,IAAI,CAAC,CAAC;QACpF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,kBAAkB,EAAE,CAAC;QAC/D,IAAI,MAAM,IAAI,IAAI,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;SAC3C;QAED,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,uBAAuB,EAAE,CAAC;QAElF,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;QAEvE,MAAM,WAAW,GAAG,IAAI,2BAAW,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAEtD,MAAM,iBAAiB,GAAG,IAAI,2BAAiB,CAAC,UAAU,EAAE,KAAK,EAAE,oBAAoB,CAAC,CAAC;QACzF,MAAM,qBAAqB,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;QAChE,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAEtE,OAAO,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IAED,KAAK;QACD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;SAChC;QACD,KAAK,CAAC,KAAK,EAAE,CAAC;IAClB,CAAC;CACJ;AAxCD,sDAwCC;AAED,kBAAe,qBAAqB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Client as KustoClient, KustoConnectionStringBuilder } from \"azure-kusto-data\";\n\nimport { BlobDescriptor } from \"./descriptors\";\n\nimport ResourceManager from \"./resourceManager\";\n\nimport IngestionBlobInfo from \"./ingestionBlobInfo\";\n\nimport { QueueClient, QueueSendMessageResponse } from \"@azure/storage-queue\";\n\nimport { IngestionPropertiesInput } from \"./ingestionProperties\";\nimport { AbstractKustoClient } from \"./abstractKustoClient\";\n\nexport abstract class KustoIngestClientBase extends AbstractKustoClient {\n    resourceManager: ResourceManager;\n\n    constructor(kcsb: string | KustoConnectionStringBuilder, defaultProps?: IngestionPropertiesInput, isBrowser?: boolean) {\n        super(defaultProps);\n        const kustoClient = new KustoClient(kcsb);\n        this.resourceManager = new ResourceManager(kustoClient, isBrowser);\n        this.defaultDatabase = kustoClient.defaultDatabase;\n    }\n\n    async ingestFromBlob(blob: string | BlobDescriptor, ingestionProperties?: IngestionPropertiesInput): Promise<QueueSendMessageResponse> {\n        this.ensureOpen();\n\n        const props = this._getMergedProps(ingestionProperties);\n\n        const descriptor = blob instanceof BlobDescriptor ? blob : new BlobDescriptor(blob);\n        const queues = await this.resourceManager.getIngestionQueues();\n        if (queues == null) {\n            throw new Error(\"Failed to get queues\");\n        }\n\n        const authorizationContext = await this.resourceManager.getAuthorizationContext();\n\n        const queueDetails = queues[Math.floor(Math.random() * queues.length)];\n\n        const queueClient = new QueueClient(queueDetails.uri);\n\n        const ingestionBlobInfo = new IngestionBlobInfo(descriptor, props, authorizationContext);\n        const ingestionBlobInfoJson = JSON.stringify(ingestionBlobInfo);\n        const encoded = Buffer.from(ingestionBlobInfoJson).toString(\"base64\");\n\n        return queueClient.sendMessage(encoded);\n    }\n\n    close() {\n        if (!this._isClosed) {\n            this.resourceManager.close();\n        }\n        super.close();\n    }\n}\n\nexport default KustoIngestClientBase;\n"]}