{"version":3,"file":"ingestClientBase.js","sourceRoot":"","sources":["../../src/ingestClientBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Client as KustoClient, KustoConnectionStringBuilder } from \"azure-kusto-data\";\n\nimport ResourceManager from \"./resourceManager.js\";\n\nimport IngestionBlobInfo from \"./ingestionBlobInfo.js\";\nimport { ContainerClient } from \"@azure/storage-blob\";\n\nimport { QueueClient } from \"@azure/storage-queue\";\n\nimport IngestionProperties, { IngestionPropertiesInput, ReportLevel, ReportMethod } from \"./ingestionProperties.js\";\nimport { AbstractKustoClient } from \"./abstractKustoClient.js\";\nimport {\n    IngestionStatus,\n    TableReportIngestionResult,\n    IngestionResult,\n    IngestionStatusInTableDescription,\n    IngestionStatusResult,\n    OperationStatus,\n    putRecordInTable,\n} from \"./ingestionResult.js\";\nimport { Readable } from \"stream\";\n\nimport { BlobDescriptor, StreamDescriptor } from \"./descriptors.js\";\n\nexport abstract class KustoIngestClientBase extends AbstractKustoClient {\n    resourceManager: ResourceManager;\n    applicationForTracing: string | null;\n    clientVersionForTracing: string | null;\n    static readonly MaxNumberOfRetryAttempts = 3;\n\n    constructor(\n        kcsb: string | KustoConnectionStringBuilder,\n        defaultProps?: IngestionPropertiesInput,\n        autoCorrectEndpoint: boolean = true,\n        isBrowser?: boolean,\n    ) {\n        super(defaultProps);\n        if (typeof kcsb === \"string\") {\n            kcsb = new KustoConnectionStringBuilder(kcsb);\n        }\n        if (autoCorrectEndpoint) {\n            kcsb.dataSource = this.getIngestionEndpoint(kcsb.dataSource);\n        }\n        const kustoClient = new KustoClient(kcsb);\n        this.resourceManager = new ResourceManager(kustoClient, isBrowser);\n        this.defaultDatabase = kustoClient.defaultDatabase;\n        const clientDetails = kcsb.clientDetails();\n        this.applicationForTracing = clientDetails.applicationNameForTracing;\n        this.clientVersionForTracing = clientDetails.versionForTracing;\n    }\n\n    async ingestFromBlob(\n        blob: string | BlobDescriptor,\n        ingestionProperties?: IngestionPropertiesInput,\n        maxRetries: number = KustoIngestClientBase.MaxNumberOfRetryAttempts,\n    ): Promise<IngestionResult> {\n        this.ensureOpen();\n        const props = this._getMergedProps(ingestionProperties);\n\n        const descriptor = blob instanceof BlobDescriptor ? blob : new BlobDescriptor(blob);\n\n        const authorizationContext = await this.resourceManager.getAuthorizationContext();\n        const ingestionBlobInfo = new IngestionBlobInfo(descriptor, props, authorizationContext, this.applicationForTracing, this.clientVersionForTracing);\n\n        const reportToTable = props.reportLevel !== ReportLevel.DoNotReport && props.reportMethod !== ReportMethod.Queue;\n\n        if (reportToTable) {\n            const statusTableClient = await this.resourceManager.createStatusTable();\n            const status = this.createStatusObject(props, OperationStatus.Pending, ingestionBlobInfo);\n            await putRecordInTable(statusTableClient, { ...status, partitionKey: ingestionBlobInfo.Id, rowKey: ingestionBlobInfo.Id });\n\n            const desc = new IngestionStatusInTableDescription(statusTableClient.url, ingestionBlobInfo.Id, ingestionBlobInfo.Id);\n            ingestionBlobInfo.IngestionStatusInTable = desc;\n            await this.sendQueueMessage(maxRetries, ingestionBlobInfo);\n            return new TableReportIngestionResult(desc, statusTableClient);\n        }\n\n        await this.sendQueueMessage(maxRetries, ingestionBlobInfo);\n        return new IngestionStatusResult(this.createStatusObject(props, OperationStatus.Queued, ingestionBlobInfo));\n    }\n\n    private async sendQueueMessage(maxRetries: number, blobInfo: IngestionBlobInfo) {\n        const queues = await this.resourceManager.getIngestionQueues();\n        if (queues == null) {\n            throw new Error(\"Failed to get queues\");\n        }\n        const ingestionBlobInfoJson = JSON.stringify(blobInfo);\n        const encoded = Buffer.from(ingestionBlobInfoJson).toString(\"base64\");\n        const retryCount = Math.min(maxRetries, queues.length);\n\n        for (let i = 0; i < retryCount; i++) {\n            const queueClient = new QueueClient(queues[i].uri);\n            try {\n                const queueResponse = await queueClient.sendMessage(encoded);\n                this.resourceManager.reportResourceUsageResult(queueClient.accountName, true);\n                return queueResponse;\n            } catch (_) {\n                this.resourceManager.reportResourceUsageResult(queueClient.accountName, false);\n            }\n        }\n\n        throw new Error(\"Failed to send message to queue.\");\n    }\n\n    private createStatusObject(props: IngestionProperties, status: OperationStatus, ingestionBlobInfo: IngestionBlobInfo): IngestionStatus {\n        const time = Date.now().toString();\n        return {\n            Status: status,\n            Timestamp: time,\n            IngestionSourceId: ingestionBlobInfo.Id,\n            IngestionSourcePath: ingestionBlobInfo.BlobPath.split(/[?;]/)[0],\n            Database: props.database,\n            Table: props.table,\n            UpdatedOn: time,\n            Details: \"\",\n        } as IngestionStatus;\n    }\n\n    async uploadToBlobWithRetry(\n        descriptor: string | Blob | ArrayBuffer | StreamDescriptor,\n        blobName: string,\n        maxRetries: number = KustoIngestClientBase.MaxNumberOfRetryAttempts,\n    ): Promise<string> {\n        const containers = await this.resourceManager.getContainers();\n\n        if (containers == null || containers.length === 0) {\n            throw new Error(\"Failed to get containers\");\n        }\n\n        const retryCount = Math.min(maxRetries, containers.length);\n\n        // Go over all containers and try to upload the file to the first one that succeeds\n        for (let i = 0; i < retryCount; i++) {\n            const containerClient = new ContainerClient(containers[i].uri);\n            const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n            try {\n                if (typeof descriptor == \"string\") {\n                    await blockBlobClient.uploadFile(descriptor);\n                } else if (descriptor instanceof StreamDescriptor) {\n                    if (descriptor.stream instanceof Buffer) {\n                        await blockBlobClient.uploadData(descriptor.stream as Buffer);\n                    } else {\n                        await blockBlobClient.uploadStream(descriptor.stream as Readable);\n                    }\n                } else {\n                    await blockBlobClient.uploadData(descriptor);\n                }\n                this.resourceManager.reportResourceUsageResult(containerClient.accountName, true);\n                return blockBlobClient.url;\n            } catch (ex) {\n                this.resourceManager.reportResourceUsageResult(containerClient.accountName, false);\n            }\n        }\n\n        throw new Error(\"Failed to upload to blob.\");\n    }\n\n    close() {\n        if (!this._isClosed) {\n            this.resourceManager.close();\n        }\n        super.close();\n    }\n}\n\nexport default KustoIngestClientBase;\n"]}