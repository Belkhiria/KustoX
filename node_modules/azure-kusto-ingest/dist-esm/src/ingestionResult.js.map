{"version":3,"file":"ingestionResult.js","sourceRoot":"","sources":["../../src/ingestionResult.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,gBAAgB,EAAE,MAAM,YAAY,CAAC;AAC9C,OAAO,EAAE,uBAAuB,EAAE,MAAM,sBAAsB,CAAC;AAS/D,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,EAAE,WAAwB,EAAE,MAAoC,EAAiB,EAAE;IACpH,MAAM,KAAK,GAAG,IAAI,gBAAgB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,OAAO,KAAK,CAAC,SAAS,EAAE,EAAE,CAAC;QACvB,IAAI,CAAC;YACD,MAAM,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QAAC,OAAO,EAAE,EAAE,CAAC;YACV,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;QAC1B,CAAC;IACL,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAN,IAAY,eAOX;AAPD,WAAY,eAAe;IACvB,sCAAmB,CAAA;IACnB,yCAAsB,CAAA;IACtB,oCAAiB,CAAA;IACjB,oCAAiB,CAAA;IACjB,sCAAmB,CAAA;IACnB,4DAAyC,CAAA;AAC7C,CAAC,EAPW,eAAe,KAAf,eAAe,QAO1B;AAED,MAAM,OAAO,0BAA0B;IACnC,YACY,iCAAoE,EACrE,cAAkC,IAAI;QADrC,sCAAiC,GAAjC,iCAAiC,CAAmC;QACrE,gBAAW,GAAX,WAAW,CAA2B;IAC9C,CAAC;IAEG,KAAK,CAAC,4BAA4B;QACrC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACpB,IAAI,CAAC,WAAW,GAAG,uBAAuB,CAAC,IAAI,CAAC,iCAAiC,CAAC,qBAAqB,CAAC,CAAC;QAC7G,CAAC;QAED,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CACnC,IAAI,CAAC,iCAAiC,CAAC,YAAY,EACnD,IAAI,CAAC,iCAAiC,CAAC,MAAM,CAChD,CAAC;IACN,CAAC;CACJ;AAED,MAAM,OAAO,qBAAqB;IAC9B,YAAoB,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;QAChD,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IAC3C,CAAC;IAEM,4BAA4B;QAC/B,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACjD,CAAC;CACJ;AAED,MAAM,OAAO,iCAAiC;IAC1C,YACW,qBAA6B,EAC7B,YAAoB,EACpB,MAAc;QAFd,0BAAqB,GAArB,qBAAqB,CAAQ;QAC7B,iBAAY,GAAZ,YAAY,CAAQ;QACpB,WAAM,GAAN,MAAM,CAAQ;IACtB,CAAC;CACP","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { TableClient, TableEntity } from \"@azure/data-tables\";\nimport { ExponentialRetry } from \"./retry.js\";\nimport { createStatusTableClient } from \"./resourceManager.js\";\nexport interface IngestionResult {\n    /// <summary>\n    /// Retrieves the detailed ingestion status of\n    /// all data ingestion operations into Kusto associated with this IKustoIngestionResult instance.\n    /// </summary>\n    getIngestionStatusCollection(): Promise<IngestionStatus>;\n}\n\nexport const putRecordInTable = async (tableClient: TableClient, entity: TableEntity<IngestionStatus>): Promise<void> => {\n    const retry = new ExponentialRetry(3, 1, 1);\n    while (retry.shouldTry()) {\n        try {\n            await tableClient.createEntity(entity);\n        } catch (ex) {\n            await retry.backoff();\n        }\n    }\n};\n\nexport enum OperationStatus {\n    Pending = \"Pending\",\n    Succeede = \"Succeeded\",\n    Failed = \"Failed\",\n    Queued = \"Queued\",\n    Skipped = \"Skipped\",\n    PartiallySucceeded = \"PartiallySucceeded\",\n}\n\nexport class TableReportIngestionResult implements IngestionResult {\n    public constructor(\n        private ingestionStatusInTableDescription: IngestionStatusInTableDescription,\n        public tableClient: TableClient | null = null,\n    ) {}\n\n    public async getIngestionStatusCollection(): Promise<IngestionStatus> {\n        if (!this.tableClient) {\n            this.tableClient = createStatusTableClient(this.ingestionStatusInTableDescription.tableConnectionString);\n        }\n\n        return await this.tableClient.getEntity<IngestionStatus>(\n            this.ingestionStatusInTableDescription.partitionKey,\n            this.ingestionStatusInTableDescription.rowKey,\n        );\n    }\n}\n\nexport class IngestionStatusResult implements IngestionResult {\n    constructor(private ingestionStatus: IngestionStatus) {\n        this.ingestionStatus = ingestionStatus;\n    }\n\n    public getIngestionStatusCollection(): Promise<IngestionStatus> {\n        return Promise.resolve(this.ingestionStatus);\n    }\n}\n\nexport class IngestionStatusInTableDescription {\n    constructor(\n        public tableConnectionString: string,\n        public partitionKey: string,\n        public rowKey: string,\n    ) {}\n}\n\nexport interface IngestionStatus {\n    Timestamp: string;\n    Status: OperationStatus;\n    IngestionSourceId: string;\n    IngestionSourcePath: string;\n    Database: string;\n    Table: string;\n    UpdatedOn: string;\n    Details: string;\n}\n"]}