{"version":3,"file":"rankedStorageAccountSet.js","sourceRoot":"","sources":["../../src/rankedStorageAccountSet.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { RankedStorageAccount } from \"./rankedStorageAccount.js\";\n\nexport class RankedStorageAccountSet {\n    public static readonly DefaultNumberOfBuckets: number = 6;\n    public static readonly DefaultBucketDurationInSeconds: number = 10;\n    public static readonly DefaultTiers: number[] = [90, 70, 30, 0];\n    public static readonly DefaultTimeProviderInSeconds: () => number = () => {\n        return new Date().getTime() / 1000;\n    };\n\n    private accounts: Map<string, RankedStorageAccount>;\n\n    constructor(\n        private numberOfBuckets: number = RankedStorageAccountSet.DefaultNumberOfBuckets,\n        private bucketDuration: number = RankedStorageAccountSet.DefaultBucketDurationInSeconds,\n        private tiers: number[] = RankedStorageAccountSet.DefaultTiers,\n        private timeProvider: () => number = RankedStorageAccountSet.DefaultTimeProviderInSeconds,\n    ) {\n        this.accounts = new Map<string, RankedStorageAccount>();\n    }\n\n    logResultToAccount(accountName: string, result: boolean) {\n        if (!this.accounts.has(accountName)) {\n            throw new Error(\"Storage account name is not part of the set.\");\n        }\n        this.accounts.get(accountName)?.logResult(result);\n    }\n\n    registerStorageAccount(accountName: string) {\n        if (this.accounts.has(accountName)) {\n            return;\n        }\n        this.accounts.set(accountName, new RankedStorageAccount(accountName, this.numberOfBuckets, this.bucketDuration, this.timeProvider));\n    }\n\n    getStorageAccount(accountName: string): RankedStorageAccount {\n        const account = this.accounts.get(accountName);\n        if (account) {\n            return account;\n        }\n        throw new Error(\"Storage account name is not part of the set.\");\n    }\n\n    getRankedShuffledAccounts(): RankedStorageAccount[] {\n        const accountsByTier: RankedStorageAccount[][] = new Array<RankedStorageAccount[]>(this.tiers.length);\n\n        // Group accounts by tier and rank\n        for (const account of this.accounts.values()) {\n            const rank = account.getRank() * 100;\n            const tierInedx = this.tiers.findIndex((tier) => rank >= tier);\n            accountsByTier[tierInedx] = accountsByTier[tierInedx] || [];\n            accountsByTier[tierInedx].push(account);\n        }\n\n        // Shuffle each tier\n        for (let i = 0; i < this.tiers.length; i++) {\n            if (accountsByTier[i]) {\n                accountsByTier[i].sort(() => Math.random() - 0.5);\n            }\n        }\n\n        // Flatten the array\n        return accountsByTier.flat();\n    }\n}\n"]}