{"version":3,"file":"columnMappings.js","sourceRoot":"","sources":["../../src/columnMappings.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/ban-types -- We legitimately want to use {} as a \"any non-nullable type\" */\n\nimport { IngestionMappingKind } from \"./ingestionProperties.js\";\n\nexport enum FieldTransformation {\n    PropertyBagArrayToDictionary = \"PropertyBagArrayToDictionary\",\n    DateTimeFromUnixSeconds = \"DateTimeFromUnixSeconds\",\n    DateTimeFromUnixMilliseconds = \"DateTimeFromUnixMilliseconds\",\n    DateTimeFromUnixMicroseconds = \"DateTimeFromUnixMicroseconds\",\n    DateTimeFromUnixNanoseconds = \"DateTimeFromUnixNanoseconds\",\n}\n\nexport enum ConstantTransformation {\n    SourceLocation = \"SourceLocation\",\n    SourceLineNumber = \"SourceLineNumber\",\n}\n\nexport type Transformation = FieldTransformation | ConstantTransformation;\n\ninterface MappingProperties {\n    Field?: string;\n    Path?: string;\n    Ordinal?: number;\n    ConstValue?: {};\n    Transform?: Transformation;\n}\n\ntype MappingPropertiesStrings = {\n    [key in keyof MappingProperties]: string;\n};\n\ninterface ApiColumnMapping {\n    Column: string;\n    DataType?: string;\n    Properties?: MappingPropertiesStrings;\n}\n\nexport abstract class ColumnMapping {\n    protected constructor(\n        readonly columnName: string,\n        readonly cslDataType?: string,\n        readonly Properties?: MappingProperties,\n    ) {}\n\n    public abstract mappingKind: IngestionMappingKind;\n\n    public toApiMapping(): ApiColumnMapping {\n        const result: ApiColumnMapping = {\n            Column: this.columnName,\n        };\n        if (this.cslDataType) {\n            result.DataType = this.cslDataType;\n        }\n\n        if (this.Properties) {\n            result.Properties = {};\n            for (const key in this.Properties) {\n                if (Object.prototype.hasOwnProperty.call(this.Properties, key)) {\n                    const typedKey = key as keyof MappingProperties;\n                    const property = this.Properties[typedKey];\n\n                    // We don't do if (property) because we '0' is a legitimate value\n                    if (property !== undefined && property !== null) {\n                        result.Properties[typedKey] = property.toString();\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\n\nexport class CsvColumnMapping extends ColumnMapping {\n    /**\n     * @deprecated Use the factory methods instead.\n     */\n    protected constructor(\n        readonly columnName: string,\n        readonly cslDataType?: string,\n        readonly ordinal?: string,\n        constantValue?: {},\n    ) {\n        super(columnName, cslDataType, {\n            Ordinal: ordinal === undefined ? undefined : parseInt(ordinal, 10),\n            ConstValue: constantValue,\n        });\n    }\n\n    public static withOrdinal(columnName: string, ordinal: number, cslDataType?: string): CsvColumnMapping {\n        return new CsvColumnMapping(columnName, cslDataType, ordinal.toString());\n    }\n\n    public static withConstantValue(columnName: string, constantValue: {}, cslDataType?: string): CsvColumnMapping {\n        return new CsvColumnMapping(columnName, cslDataType, undefined, constantValue);\n    }\n\n    mappingKind = IngestionMappingKind.CSV;\n}\n\nexport class JsonColumnMapping extends ColumnMapping {\n    /**\n     * @deprecated Use the factory methods instead.\n     */\n    constructor(\n        readonly columnName: string,\n        readonly jsonPath?: string,\n        cslDataType: string | null = null,\n        constantValue?: {},\n        transform?: Transformation,\n    ) {\n        super(columnName, cslDataType ?? undefined, {\n            Path: jsonPath,\n            ConstValue: constantValue,\n            Transform: transform,\n        });\n    }\n\n    public static withPath(columnName: string, path: string, cslDataType?: string, transform?: FieldTransformation): JsonColumnMapping {\n        return new JsonColumnMapping(columnName, path, cslDataType, undefined, transform);\n    }\n\n    public static withConstantValue(columnName: string, constantValue: {}, cslDataType?: string): JsonColumnMapping {\n        return new JsonColumnMapping(columnName, undefined, cslDataType, constantValue);\n    }\n\n    public static withTransform(columnName: string, transform: ConstantTransformation, cslDataType?: string): JsonColumnMapping {\n        return new JsonColumnMapping(columnName, undefined, cslDataType, undefined, transform);\n    }\n\n    mappingKind = IngestionMappingKind.JSON;\n}\n\nexport class AvroColumnMapping extends ColumnMapping {\n    private constructor(\n        readonly columnName: string,\n        cslDataType?: string,\n        path?: string,\n        field?: string,\n        constantValue?: {},\n        transform?: Transformation,\n    ) {\n        super(columnName, cslDataType ?? undefined, {\n            Path: path,\n            Field: field,\n            ConstValue: constantValue,\n            Transform: transform,\n        });\n    }\n\n    public static withPath(columnName: string, path: string, cslDataType?: string, transform?: FieldTransformation): AvroColumnMapping {\n        return new AvroColumnMapping(columnName, cslDataType, path, undefined, undefined, transform);\n    }\n\n    public static withField(columnName: string, field: string, cslDataType?: string, transform?: FieldTransformation): AvroColumnMapping {\n        return new AvroColumnMapping(columnName, cslDataType, undefined, field, undefined, transform);\n    }\n\n    public static withConstantValue(columnName: string, constantValue: {}, cslDataType?: string): AvroColumnMapping {\n        return new AvroColumnMapping(columnName, cslDataType, undefined, undefined, constantValue);\n    }\n\n    public static withTransform(columnName: string, transform: ConstantTransformation, cslDataType?: string): AvroColumnMapping {\n        return new AvroColumnMapping(columnName, cslDataType, undefined, undefined, undefined, transform);\n    }\n\n    mappingKind = IngestionMappingKind.AVRO;\n}\n\nexport class ApacheAvroColumnMapping extends ColumnMapping {\n    private constructor(\n        readonly columnName: string,\n        cslDataType?: string,\n        path?: string,\n        field?: string,\n        constantValue?: {},\n        transform?: Transformation,\n    ) {\n        super(columnName, cslDataType ?? undefined, {\n            Path: path,\n            Field: field,\n            ConstValue: constantValue,\n            Transform: transform,\n        });\n    }\n\n    public static withPath(columnName: string, path: string, cslDataType?: string, transform?: FieldTransformation): ApacheAvroColumnMapping {\n        return new ApacheAvroColumnMapping(columnName, cslDataType, path, undefined, undefined, transform);\n    }\n\n    public static withField(columnName: string, field: string, cslDataType?: string, transform?: FieldTransformation): ApacheAvroColumnMapping {\n        return new ApacheAvroColumnMapping(columnName, cslDataType, undefined, field, undefined, transform);\n    }\n\n    public static withConstantValue(columnName: string, constantValue: {}, cslDataType?: string): ApacheAvroColumnMapping {\n        return new ApacheAvroColumnMapping(columnName, cslDataType, undefined, undefined, constantValue);\n    }\n\n    public static withTransform(columnName: string, transform: ConstantTransformation, cslDataType?: string): ApacheAvroColumnMapping {\n        return new ApacheAvroColumnMapping(columnName, cslDataType, undefined, undefined, undefined, transform);\n    }\n\n    mappingKind = IngestionMappingKind.APACHEAVRO;\n}\n\nexport class SStreamColumnMapping extends ColumnMapping {\n    private constructor(\n        readonly columnName: string,\n        cslDataType?: string,\n        path?: string,\n        field?: string,\n        constantValue?: {},\n        transform?: Transformation,\n    ) {\n        super(columnName, cslDataType ?? undefined, {\n            Path: path,\n            Field: field,\n            ConstValue: constantValue,\n            Transform: transform,\n        });\n    }\n\n    public static withPath(columnName: string, path: string, cslDataType?: string, transform?: FieldTransformation): SStreamColumnMapping {\n        return new SStreamColumnMapping(columnName, cslDataType, path, undefined, undefined, transform);\n    }\n\n    public static withField(columnName: string, field: string, cslDataType?: string, transform?: FieldTransformation): SStreamColumnMapping {\n        return new SStreamColumnMapping(columnName, cslDataType, undefined, field, undefined, transform);\n    }\n\n    public static withConstantValue(columnName: string, constantValue: {}, cslDataType?: string): SStreamColumnMapping {\n        return new SStreamColumnMapping(columnName, cslDataType, undefined, undefined, constantValue);\n    }\n\n    public static withTransform(columnName: string, transform: ConstantTransformation, cslDataType?: string): SStreamColumnMapping {\n        return new SStreamColumnMapping(columnName, cslDataType, undefined, undefined, undefined, transform);\n    }\n\n    mappingKind = IngestionMappingKind.SSTREAM;\n}\n\nexport class ParquetColumnMapping extends ColumnMapping {\n    private constructor(\n        readonly columnName: string,\n        cslDataType?: string,\n        path?: string,\n        field?: string,\n        constantValue?: {},\n        transform?: Transformation,\n    ) {\n        super(columnName, cslDataType ?? undefined, {\n            Path: path,\n            Field: field,\n            ConstValue: constantValue,\n            Transform: transform,\n        });\n    }\n\n    public static withPath(columnName: string, path: string, cslDataType?: string, transform?: FieldTransformation): ParquetColumnMapping {\n        return new ParquetColumnMapping(columnName, cslDataType, path, undefined, undefined, transform);\n    }\n\n    public static withField(columnName: string, field: string, cslDataType?: string, transform?: FieldTransformation): ParquetColumnMapping {\n        return new ParquetColumnMapping(columnName, cslDataType, undefined, field, undefined, transform);\n    }\n\n    public static withConstantValue(columnName: string, constantValue: {}, cslDataType?: string): ParquetColumnMapping {\n        return new ParquetColumnMapping(columnName, cslDataType, undefined, undefined, constantValue);\n    }\n\n    public static withTransform(columnName: string, transform: ConstantTransformation, cslDataType?: string): ParquetColumnMapping {\n        return new ParquetColumnMapping(columnName, cslDataType, undefined, undefined, undefined, transform);\n    }\n\n    mappingKind = IngestionMappingKind.PARQUET;\n}\n\nexport class OrcColumnMapping extends ColumnMapping {\n    private constructor(\n        readonly columnName: string,\n        cslDataType?: string,\n        path?: string,\n        field?: string,\n        constantValue?: {},\n        transform?: Transformation,\n    ) {\n        super(columnName, cslDataType ?? undefined, {\n            Path: path,\n            Field: field,\n            ConstValue: constantValue,\n            Transform: transform,\n        });\n    }\n\n    public static withPath(columnName: string, path: string, cslDataType?: string, transform?: FieldTransformation): OrcColumnMapping {\n        return new OrcColumnMapping(columnName, cslDataType, path, undefined, undefined, transform);\n    }\n\n    public static withField(columnName: string, field: string, cslDataType?: string, transform?: FieldTransformation): OrcColumnMapping {\n        return new OrcColumnMapping(columnName, cslDataType, undefined, field, undefined, transform);\n    }\n\n    public static withConstantValue(columnName: string, constantValue: {}, cslDataType?: string): OrcColumnMapping {\n        return new OrcColumnMapping(columnName, cslDataType, undefined, undefined, constantValue);\n    }\n\n    public static withTransform(columnName: string, transform: ConstantTransformation, cslDataType?: string): OrcColumnMapping {\n        return new OrcColumnMapping(columnName, cslDataType, undefined, undefined, undefined, transform);\n    }\n\n    mappingKind = IngestionMappingKind.ORC;\n}\n\nexport class W3CLogFileMapping extends ColumnMapping {\n    private constructor(\n        readonly columnName: string,\n        cslDataType?: string,\n        field?: string,\n        constantValue?: {},\n        transform?: Transformation,\n    ) {\n        super(columnName, cslDataType ?? undefined, { Field: field, ConstValue: constantValue, Transform: transform });\n    }\n\n    public static withField(columnName: string, field: string, cslDataType?: string, transform?: FieldTransformation): W3CLogFileMapping {\n        return new W3CLogFileMapping(columnName, cslDataType, field, undefined, transform);\n    }\n\n    public static withConstantValue(columnName: string, constantValue: {}, cslDataType?: string): W3CLogFileMapping {\n        return new W3CLogFileMapping(columnName, cslDataType, undefined, constantValue);\n    }\n\n    public static withTransform(columnName: string, transform: ConstantTransformation, cslDataType?: string): W3CLogFileMapping {\n        return new W3CLogFileMapping(columnName, cslDataType, undefined, undefined, transform);\n    }\n\n    mappingKind = IngestionMappingKind.W3CLOGFILE;\n}\n"]}