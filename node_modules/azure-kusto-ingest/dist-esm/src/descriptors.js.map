{"version":3,"file":"descriptors.js","sourceRoot":"","sources":["../../src/descriptors.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport uuidValidate from \"uuid-validate\";\nimport { Readable } from \"stream\";\nimport IngestionProperties from \"./ingestionProperties\";\nimport { BlobClient } from \"@azure/storage-blob\";\n\nexport enum CompressionType {\n    ZIP = \".zip\",\n    GZIP = \".gz\",\n    None = \"\",\n}\n\nexport const getSourceId = (sourceId: string | null): string => {\n    if (sourceId) {\n        if (!uuidValidate(sourceId, 4)) {\n            throw Error(\"sourceId is not a valid uuid/v4\");\n        }\n        return sourceId;\n    }\n    return uuidv4();\n};\n\nexport abstract class AbstractDescriptor {\n    constructor(public sourceId: string | null = null, public size: number | null = null) {\n        this.sourceId = getSourceId(sourceId);\n    }\n}\n\nexport class StreamDescriptor extends AbstractDescriptor {\n    /**\n     * Use Readable for Node.js and ArrayBuffer in browser\n     */\n    constructor(\n        readonly stream: Readable | ArrayBuffer,\n        sourceId: string | null = null,\n        public compressionType: CompressionType = CompressionType.None,\n        size: number | null = null\n    ) {\n        super(sourceId, size);\n    }\n\n    merge(other: StreamDescriptor) {\n        this.size = other.size;\n        this.compressionType = other.compressionType;\n        this.sourceId = other.sourceId;\n        return this;\n    }\n\n    // Currently streams are not compressed by us\n    getCompressionSuffix() {\n        return this.compressionType ? `.${this.compressionType}` : \"\";\n    }\n}\n\nexport class BlobDescriptor extends AbstractDescriptor {\n    constructor(readonly path: string, size: number | null = null, sourceId: string | null = null) {\n        super(sourceId, size);\n    }\n\n    async fillSize(): Promise<void> {\n        if (!this.size) {\n            const blobClient = new BlobClient(this.path);\n            const blobProps = await blobClient.getProperties();\n            const length = blobProps.contentLength;\n            if (length !== undefined) {\n                if (length === 0) {\n                    throw new Error(\"Empty blob.\");\n                }\n                this.size = length;\n            }\n        }\n    }\n}\n\nexport interface FileDescriptorBase {\n    size: number | null;\n    zipped: boolean;\n    compressionType: CompressionType;\n    cleanupTmp?: () => Promise<void>;\n    extension?: string;\n    name?: string;\n    sourceId: string | null;\n    getCompressionSuffix: () => string;\n}\n\nexport const generateBlobName = (desc: StreamDescriptor | FileDescriptorBase, props: IngestionProperties): string => {\n    const extension = desc instanceof StreamDescriptor ? null : `${desc.name ? \"__\" + desc.name : `${desc.extension ? \".\" + desc.extension : \"\"}`}`;\n\n    const formatSuffix = props.format ? `.${props.format}` : \".csv\";\n    const compressionString = desc.getCompressionSuffix();\n    return `${props.database}__${props.table}__${desc.sourceId}${extension || formatSuffix}${compressionString}`;\n};\n"]}