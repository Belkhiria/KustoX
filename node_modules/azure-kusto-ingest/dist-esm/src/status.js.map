{"version":3,"file":"status.js","sourceRoot":"","sources":["../../src/status.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,uCAAwC;AAIxC,MAAa,aAAa;IAStB,YAAY,GAAQ,EAAE,GAAQ,EAAE,UAA2B;QACvD,IAAI,KAAK,GAAa,CAAC,aAAa,EAAE,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE,qBAAqB,EAAE,gBAAgB,CAAC,CAAC;QAEzH,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YACrC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;SACpC;QAED,MAAM,IAAI,GAAwB,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QAEhF,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACtB,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;SAC3B;IACL,CAAC;CACJ;AAtBD,sCAsBC;AAED,MAAM,cAAe,SAAQ,aAAa;IAGtC,YAAY,GAAQ,EAAE,GAAQ;QAC1B,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;IACrC,CAAC;CACJ;AAED,MAAM,cAAe,SAAQ,aAAa;IAOtC,YAAY,GAAQ,EAAE,GAAQ;QAC1B,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,eAAe,EAAE,4BAA4B,EAAE,aAAa,CAAC,CAAC,CAAC;IACxH,CAAC;CACJ;AAED,MAAa,uBAAuB;IAGhC,YAAY,iBAAoC;QAC5C,IAAI,CAAC,OAAO,GAAG,IAAI,qBAAW,CAAC,GAAG,EAAE,CAAC,iBAAiB,CAAC,eAAe,CAAC,6BAA6B,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAkB,CAAC,EAAE,cAAc,CAAC,CAAC;QACxJ,IAAI,CAAC,OAAO,GAAG,IAAI,qBAAW,CAAC,GAAG,EAAE,CAAC,iBAAiB,CAAC,eAAe,CAAC,yBAAyB,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAkB,CAAC,EAAE,cAAc,CAAC,CAAC;IACxJ,CAAC;CACJ;AAPD,0DAOC;AAED,kBAAe,uBAAuB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { StatusQueue } from \"./statusQ\";\nimport KustoIngestClient from \"./ingestClient\";\nimport { ResourceURI } from \"./resourceManager\";\n\nexport class StatusMessage {\n    OperationId?: string;\n    Database?: string;\n    Table?: string;\n    IngestionSourceId?: string;\n    IngestionSourcePath?: string;\n    RootActivityId?: string;\n\n    [other: string]: any;\n    constructor(raw: any, obj: any, extraProps: string[] | null) {\n        let props: string[] = [\"OperationId\", \"Database\", \"Table\", \"IngestionSourceId\", \"IngestionSourcePath\", \"RootActivityId\"];\n\n        if (extraProps && extraProps.length > 0) {\n            props = props.concat(extraProps);\n        }\n\n        const _obj: Record<string, any> = obj || JSON.parse(raw || JSON.stringify(raw));\n\n        for (const prop of props) {\n            this[prop] = _obj[prop];\n        }\n    }\n}\n\nclass SuccessMessage extends StatusMessage {\n    SucceededOn?: string;\n\n    constructor(raw: any, obj: any) {\n        super(raw, obj, [\"SucceededOn\"]);\n    }\n}\n\nclass FailureMessage extends StatusMessage {\n    FailedOn?: string;\n    Details?: string;\n    ErrorCode?: string;\n    FailureStatus?: string;\n    OriginatesFromUpdatePolicy?: string;\n    ShouldRetry?: string;\n    constructor(raw: any, obj: any) {\n        super(raw, obj, [\"FailedOn\", \"Details\", \"ErrorCode\", \"FailureStatus\", \"OriginatesFromUpdatePolicy\", \"ShouldRetry\"]);\n    }\n}\n\nexport class KustoIngestStatusQueues {\n    success: StatusQueue;\n    failure: StatusQueue;\n    constructor(kustoIngestClient: KustoIngestClient) {\n        this.success = new StatusQueue(() => kustoIngestClient.resourceManager.getSuccessfulIngestionsQueues().then((r) => r as ResourceURI[]), SuccessMessage);\n        this.failure = new StatusQueue(() => kustoIngestClient.resourceManager.getFailedIngestionsQueues().then((r) => r as ResourceURI[]), FailureMessage);\n    }\n}\n\nexport default KustoIngestStatusQueues;\n"]}