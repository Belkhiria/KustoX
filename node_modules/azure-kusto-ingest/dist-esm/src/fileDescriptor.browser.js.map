{"version":3,"file":"fileDescriptor.browser.js","sourceRoot":"","sources":["../../src/fileDescriptor.browser.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;;;;AAElC,gDAAwB;AACxB,+CAAwF;AAExF,MAAa,cAAe,SAAQ,gCAAkB;IAMlD,YACa,IAAU,EACnB,WAA0B,IAAI,EAC9B,OAAsB,IAAI,EAC1B,kBAAmC,6BAAe,CAAC,IAAI,EAC9C,SAAkB,EAClB,IAAa;QAEtB,KAAK,CAAC,QAAQ,CAAC,CAAC;QAPP,SAAI,GAAJ,IAAI,CAAM;QAIV,cAAS,GAAT,SAAS,CAAS;QAClB,SAAI,GAAJ,IAAI,CAAS;QAGtB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,eAAe,KAAK,6BAAe,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,KAAK,KAAK,IAAI,IAAI,CAAC,SAAS,KAAK,MAAM,CAAC;IACpH,CAAC;IAED,KAAK,CAAC,OAAO;QACT,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACd,IAAI;gBACA,MAAM,OAAO,GAAG,cAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;gBACzD,OAAO,IAAI,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;aAC9B;YAAC,OAAO,CAAC,EAAE;gBACR,kCAAkC;aACrC;SACJ;QAED,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAED,KAAK,CAAC,OAAO;QACT,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;SAC3B;IACL,CAAC;IAED,oBAAoB;QAChB,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;IACrE,CAAC;CACJ;AA1CD,wCA0CC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport pako from \"pako\";\nimport { AbstractDescriptor, CompressionType, FileDescriptorBase } from \"./descriptors\";\n\nexport class FileDescriptor extends AbstractDescriptor implements FileDescriptorBase {\n    size: number | null;\n    zipped: boolean;\n    compressionType: CompressionType;\n    cleanupTmp?: () => Promise<void>;\n\n    constructor(\n        readonly file: Blob,\n        sourceId: string | null = null,\n        size: number | null = null,\n        compressionType: CompressionType = CompressionType.None,\n        readonly extension?: string,\n        readonly name?: string\n    ) {\n        super(sourceId);\n        this.compressionType = compressionType;\n        this.size = size || file.size;\n        this.zipped = compressionType !== CompressionType.None || this.extension === \".gz\" || this.extension === \".zip\";\n    }\n\n    async prepare(): Promise<Blob> {\n        if (!this.zipped) {\n            try {\n                const gzipped = pako.gzip(await this.file.arrayBuffer());\n                return new Blob([gzipped]);\n            } catch (e) {\n                // Ignore - return the file itself\n            }\n        }\n\n        return this.file;\n    }\n\n    async cleanup(): Promise<void> {\n        if (this.cleanupTmp) {\n            await this.cleanupTmp();\n        }\n    }\n\n    getCompressionSuffix() {\n        return this.compressionType ? `.${this.compressionType}` : \".gz\";\n    }\n}\n"]}