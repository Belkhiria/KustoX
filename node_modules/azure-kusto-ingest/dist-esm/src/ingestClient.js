"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.KustoIngestClient = void 0;
const descriptors_1 = require("./descriptors");
const fileDescriptor_1 = require("./fileDescriptor");
const ingestClientBase_1 = require("./ingestClientBase");
class KustoIngestClient extends ingestClientBase_1.KustoIngestClientBase {
    constructor(kcsb, defaultProps) {
        super(kcsb, defaultProps);
    }
    /**
     * Use string in Node.JS and Blob in browser
     */
    async ingestFromFile(file, ingestionProperties) {
        this.ensureOpen();
        const props = this._getMergedProps(ingestionProperties);
        const descriptor = file instanceof fileDescriptor_1.FileDescriptor ? file : new fileDescriptor_1.FileDescriptor(file);
        try {
            const blobName = (0, descriptors_1.generateBlobName)(descriptor, props);
            const [fileToUpload, blockBlobClient] = await Promise.all([descriptor.prepare(), this.resourceManager.getBlockBlobClient(blobName)]);
            await blockBlobClient.uploadFile(fileToUpload);
            return this.ingestFromBlob(new descriptors_1.BlobDescriptor(blockBlobClient.url, descriptor.size, descriptor.sourceId), props);
        }
        finally {
            await descriptor.cleanup();
        }
    }
    /**
     * Use Readable in Node.JS and ArrayBuffer in browser
     */
    async ingestFromStream(stream, ingestionProperties) {
        this.ensureOpen();
        const props = this._getMergedProps(ingestionProperties);
        const descriptor = stream instanceof descriptors_1.StreamDescriptor ? stream : new descriptors_1.StreamDescriptor(stream);
        const blobName = (0, descriptors_1.generateBlobName)(descriptor, props);
        const blockBlobClient = await this.resourceManager.getBlockBlobClient(blobName);
        if (descriptor.stream instanceof Buffer) {
            await blockBlobClient.uploadData(descriptor.stream);
        }
        else {
            await blockBlobClient.uploadStream(descriptor.stream);
        }
        return this.ingestFromBlob(new descriptors_1.BlobDescriptor(blockBlobClient.url), props); // descriptor.size?
    }
}
exports.KustoIngestClient = KustoIngestClient;
exports.default = KustoIngestClient;
//# sourceMappingURL=ingestClient.js.map