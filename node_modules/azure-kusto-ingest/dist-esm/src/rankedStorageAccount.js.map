{"version":3,"file":"rankedStorageAccount.js","sourceRoot":"","sources":["../../src/rankedStorageAccount.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nclass StorageAccountStats {\n    public successCount: number;\n    public totalCount: number;\n\n    constructor() {\n        this.successCount = 0;\n        this.totalCount = 0;\n    }\n\n    logResult(success: boolean): void {\n        this.totalCount += 1;\n        if (success) {\n            this.successCount += 1;\n        }\n    }\n\n    reset(): void {\n        this.successCount = 0;\n        this.totalCount = 0;\n    }\n}\n\nexport class RankedStorageAccount {\n    private buckets: StorageAccountStats[];\n    private lastUpdateTime: number;\n    private currentBucketIndex: number;\n\n    constructor(\n        private accountName: string,\n        private numberOfBuckets: number,\n        private bucketDuration: number,\n        private timeProvider: () => number,\n    ) {\n        this.buckets = new Array<StorageAccountStats>(numberOfBuckets).fill(new StorageAccountStats()).map(() => new StorageAccountStats());\n        this.lastUpdateTime = this.timeProvider();\n        this.currentBucketIndex = 0;\n    }\n\n    logResult(success: boolean): void {\n        this.currentBucketIndex = this.adjustForTimePassed();\n        this.buckets[this.currentBucketIndex].logResult(success);\n    }\n\n    getAccountName(): string {\n        return this.accountName;\n    }\n\n    adjustForTimePassed(): number {\n        const currentTime = this.timeProvider();\n        const timeDelta = currentTime - this.lastUpdateTime;\n        let window_size = 0;\n\n        if (timeDelta >= this.bucketDuration) {\n            this.lastUpdateTime = currentTime;\n            window_size = Math.min(Math.floor(timeDelta / this.bucketDuration), this.numberOfBuckets);\n            for (let i = 1; i < window_size + 1; i++) {\n                const indexToReset = (this.currentBucketIndex + i) % this.numberOfBuckets;\n                this.buckets[indexToReset].reset();\n            }\n        }\n\n        return (this.currentBucketIndex + window_size) % this.numberOfBuckets;\n    }\n\n    getRank(): number {\n        let rank: number = 0;\n        let totalWeight: number = 0;\n\n        for (let i = 1; i <= this.numberOfBuckets; i++) {\n            const bucketIndex: number = (this.currentBucketIndex + i) % this.numberOfBuckets;\n            const bucket: StorageAccountStats = this.buckets[bucketIndex];\n            if (bucket.totalCount === 0) {\n                continue;\n            }\n            const successRate: number = bucket.successCount / bucket.totalCount;\n            rank += successRate * i;\n            totalWeight += i;\n        }\n\n        if (totalWeight === 0) {\n            return 1;\n        }\n        return rank / totalWeight;\n    }\n}\n"]}