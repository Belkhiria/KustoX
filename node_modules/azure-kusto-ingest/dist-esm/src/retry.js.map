{"version":3,"file":"retry.js","sourceRoot":"","sources":["../../src/retry.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,MAAM,CAAC,MAAM,KAAK,GAAG,CAAC,EAAU,EAAiB,EAAE;IAC/C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC3B,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,MAAM,OAAO,gBAAgB;IAGzB,YACW,YAAoB,EACpB,aAAqB,EACrB,aAAqB;QAFrB,iBAAY,GAAZ,YAAY,CAAQ;QACpB,kBAAa,GAAb,aAAa,CAAQ;QACrB,kBAAa,GAAb,aAAa,CAAQ;QAE5B,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;IAC5B,CAAC;IAEM,KAAK,CAAC,OAAO;QAChB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;QAC5C,CAAC;QAED,IAAI,CAAC,cAAc,EAAE,CAAC;QAEtB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC;YACpB,6CAA6C;YAC7C,OAAO;QACX,CAAC;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;QACvE,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;QAC9D,MAAM,KAAK,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC;IACxC,CAAC;IAEM,SAAS;QACZ,OAAO,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC;IACnD,CAAC;CACJ","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nexport const sleep = (ms: number): Promise<void> => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, ms);\n    });\n};\n\nexport class ExponentialRetry {\n    public currentAttempt: number;\n\n    constructor(\n        public attemptCount: number,\n        public sleepBaseSecs: number,\n        public maxJitterSecs: number,\n    ) {\n        this.currentAttempt = 0;\n    }\n\n    public async backoff(): Promise<void> {\n        if (!this.shouldTry()) {\n            throw new Error(\"Max retries exceeded\");\n        }\n\n        this.currentAttempt++;\n\n        if (!this.shouldTry()) {\n            // This was the last retry - no need to sleep\n            return;\n        }\n\n        const base = this.sleepBaseSecs * Math.pow(2, this.currentAttempt - 1);\n        const jitter = Math.floor(this.maxJitterSecs * Math.random());\n        await sleep(1000 * (base + jitter));\n    }\n\n    public shouldTry(): boolean {\n        return this.currentAttempt < this.attemptCount;\n    }\n}\n"]}