"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.KustoIngestStatusQueues = exports.StatusMessage = void 0;
const statusQ_1 = require("./statusQ");
class StatusMessage {
    constructor(raw, obj, extraProps) {
        let props = ["OperationId", "Database", "Table", "IngestionSourceId", "IngestionSourcePath", "RootActivityId"];
        if (extraProps && extraProps.length > 0) {
            props = props.concat(extraProps);
        }
        const _obj = obj || JSON.parse(raw || JSON.stringify(raw));
        for (const prop of props) {
            this[prop] = _obj[prop];
        }
    }
}
exports.StatusMessage = StatusMessage;
class SuccessMessage extends StatusMessage {
    constructor(raw, obj) {
        super(raw, obj, ["SucceededOn"]);
    }
}
class FailureMessage extends StatusMessage {
    constructor(raw, obj) {
        super(raw, obj, ["FailedOn", "Details", "ErrorCode", "FailureStatus", "OriginatesFromUpdatePolicy", "ShouldRetry"]);
    }
}
class KustoIngestStatusQueues {
    constructor(kustoIngestClient) {
        this.success = new statusQ_1.StatusQueue(() => kustoIngestClient.resourceManager.getSuccessfulIngestionsQueues().then((r) => r), SuccessMessage);
        this.failure = new statusQ_1.StatusQueue(() => kustoIngestClient.resourceManager.getFailedIngestionsQueues().then((r) => r), FailureMessage);
    }
}
exports.KustoIngestStatusQueues = KustoIngestStatusQueues;
exports.default = KustoIngestStatusQueues;
//# sourceMappingURL=status.js.map