"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const zlib_1 = __importDefault(require("zlib"));
const descriptors_1 = require("./descriptors");
const fileDescriptor_1 = require("./fileDescriptor");
const streamUtils_1 = require("./streamUtils");
const streamingIngestClientBase_1 = require("./streamingIngestClientBase");
class KustoStreamingIngestClient extends streamingIngestClientBase_1.KustoStreamingIngestClientBase {
    constructor(kcsb, defaultProps) {
        super(kcsb, defaultProps);
    }
    /**
     * Use Readable for Node.js and ArrayBuffer in browser
     */
    async ingestFromStream(stream, ingestionProperties, clientRequestId) {
        var _a;
        this.ensureOpen();
        const props = this._getMergedProps(ingestionProperties);
        const descriptor = stream instanceof descriptors_1.StreamDescriptor ? stream : new descriptors_1.StreamDescriptor(stream);
        const compressedStream = descriptor.compressionType === descriptors_1.CompressionType.None
            ? !(descriptor.stream instanceof ArrayBuffer)
                ? descriptor.stream.pipe(zlib_1.default.createGzip())
                : descriptor.stream
            : descriptor.stream;
        return await this.kustoClient.executeStreamingIngest(props.database, props.table, compressedStream, props.format, (_a = props.ingestionMappingReference) !== null && _a !== void 0 ? _a : null, clientRequestId);
    }
    /**
     * Use string for Node.js and Blob in browser
     */
    async ingestFromFile(file, ingestionProperties) {
        this.ensureOpen();
        const descriptor = file instanceof fileDescriptor_1.FileDescriptor ? file : new fileDescriptor_1.FileDescriptor(file);
        return this.ingestFromStream(await (0, streamUtils_1.fileToStream)(descriptor), ingestionProperties);
    }
}
exports.default = KustoStreamingIngestClient;
//# sourceMappingURL=streamingIngestClient.js.map