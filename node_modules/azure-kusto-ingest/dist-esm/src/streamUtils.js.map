{"version":3,"file":"streamUtils.js","sourceRoot":"","sources":["../../src/streamUtils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport fs from \"fs\";\nimport { PassThrough, Readable } from \"stream\";\nimport streamify from \"stream-array\";\nimport { CompressionType, StreamDescriptor } from \"./descriptors\";\nimport { FileDescriptor } from \"./fileDescriptor\";\n\n// Returns fs.ReadStream for node and NodeJS.ReadableStream in browser\nexport const fileToStream = (fileDescriptor: FileDescriptor): Promise<StreamDescriptor> => {\n    const streamFs = fs.createReadStream(fileDescriptor.file as string);\n    const compressionType = fileDescriptor.zipped ? CompressionType.GZIP : CompressionType.None;\n    return Promise.resolve(new StreamDescriptor(streamFs, fileDescriptor.sourceId, compressionType));\n};\n\n// Used in managed streaming where we buffer the file to memory for retries\nexport const tryFileToBuffer = async (fileDescriptor: FileDescriptor): Promise<StreamDescriptor> => {\n    try {\n        const buffer = fs.readFileSync(fileDescriptor.file as string);\n        const compressionType = fileDescriptor.zipped ? CompressionType.GZIP : CompressionType.None;\n        return new StreamDescriptor(buffer, fileDescriptor.sourceId, compressionType);\n    } catch (error) {\n        return await fileToStream(fileDescriptor);\n    }\n};\n\nconst mergeStreams = (...streams: Readable[]): Readable => {\n    let pass = new PassThrough();\n    let waiting = streams.length;\n    for (const stream of streams) {\n        pass = stream.pipe(pass, { end: false });\n        stream.once(\"end\", () => --waiting === 0 && pass.emit(\"end\"));\n    }\n    return pass;\n};\n\nexport const tryStreamToArray = async (stream: Readable, maxBufferSize: number): Promise<Buffer | Readable> => {\n    if (stream instanceof Buffer) {\n        return stream;\n    }\n    return await new Promise<Buffer | Readable>((resolve, reject) => {\n        const result: Buffer[] = [];\n        const endListener = () => resolve(Buffer.concat(result));\n        const dataHandler = (chunk: Buffer) => {\n            try {\n                result.push(chunk);\n                if (result.reduce((sum, b) => sum + b.length, 0) > maxBufferSize) {\n                    stream.removeListener(\"data\", dataHandler);\n                    stream.removeListener(\"end\", endListener);\n                    resolve(mergeStreams(streamify(result), stream));\n                }\n            } catch (e) {\n                reject(e);\n            }\n        };\n        stream.on(\"data\", dataHandler);\n        stream.on(\"end\", endListener);\n    });\n};\n\nexport const readableToStream = (stream: Readable | ArrayBuffer): Readable => {\n    return streamify([stream]);\n};\n"]}