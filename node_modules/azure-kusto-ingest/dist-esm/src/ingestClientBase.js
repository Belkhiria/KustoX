"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KustoIngestClientBase = void 0;
const azure_kusto_data_1 = require("azure-kusto-data");
const descriptors_1 = require("./descriptors");
const resourceManager_1 = __importDefault(require("./resourceManager"));
const ingestionBlobInfo_1 = __importDefault(require("./ingestionBlobInfo"));
const storage_queue_1 = require("@azure/storage-queue");
const abstractKustoClient_1 = require("./abstractKustoClient");
class KustoIngestClientBase extends abstractKustoClient_1.AbstractKustoClient {
    constructor(kcsb, defaultProps, isBrowser) {
        super(defaultProps);
        const kustoClient = new azure_kusto_data_1.Client(kcsb);
        this.resourceManager = new resourceManager_1.default(kustoClient, isBrowser);
        this.defaultDatabase = kustoClient.defaultDatabase;
    }
    async ingestFromBlob(blob, ingestionProperties) {
        this.ensureOpen();
        const props = this._getMergedProps(ingestionProperties);
        const descriptor = blob instanceof descriptors_1.BlobDescriptor ? blob : new descriptors_1.BlobDescriptor(blob);
        const queues = await this.resourceManager.getIngestionQueues();
        if (queues == null) {
            throw new Error("Failed to get queues");
        }
        const authorizationContext = await this.resourceManager.getAuthorizationContext();
        const queueDetails = queues[Math.floor(Math.random() * queues.length)];
        const queueClient = new storage_queue_1.QueueClient(queueDetails.uri);
        const ingestionBlobInfo = new ingestionBlobInfo_1.default(descriptor, props, authorizationContext);
        const ingestionBlobInfoJson = JSON.stringify(ingestionBlobInfo);
        const encoded = Buffer.from(ingestionBlobInfoJson).toString("base64");
        return queueClient.sendMessage(encoded);
    }
    close() {
        if (!this._isClosed) {
            this.resourceManager.close();
        }
        super.close();
    }
}
exports.KustoIngestClientBase = KustoIngestClientBase;
exports.default = KustoIngestClientBase;
//# sourceMappingURL=ingestClientBase.js.map