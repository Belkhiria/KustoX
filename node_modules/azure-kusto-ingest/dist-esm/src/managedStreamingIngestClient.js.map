{"version":3,"file":"managedStreamingIngestClient.js","sourceRoot":"","sources":["../../src/managedStreamingIngestClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { IngestionPropertiesInput } from \"./ingestionProperties\";\n\nimport { isNode } from \"@azure/core-util\";\nimport { QueueSendMessageResponse } from \"@azure/storage-queue\";\nimport { KustoConnectionStringBuilder, KustoResponseDataSet } from \"azure-kusto-data\";\nimport { Readable } from \"stream\";\nimport { AbstractKustoClient } from \"./abstractKustoClient\";\nimport { AbstractDescriptor, BlobDescriptor, StreamDescriptor } from \"./descriptors\";\nimport { FileDescriptor } from \"./fileDescriptor\";\nimport IngestClient from \"./ingestClient\";\nimport { ExponentialRetry } from \"./retry\";\nimport { readableToStream, tryFileToBuffer, tryStreamToArray } from \"./streamUtils\";\nimport StreamingIngestClient from \"./streamingIngestClient\";\n\nconst maxStreamSize = 1024 * 1024 * 4;\nconst attemptCount = 3;\nconst ingestPrefix = \"https://ingest-\";\n\nclass KustoManagedStreamingIngestClient extends AbstractKustoClient {\n    private streamingIngestClient: StreamingIngestClient;\n    private queuedIngestClient: IngestClient;\n    private baseSleepTimeSecs = 1;\n    private baseJitterSecs = 1;\n\n    /**\n     * Creates a KustoManagedStreamingIngestClient from a DM connection string.\n     * This method infers the engine connection string.\n     * For advanced usage, use the constructor that takes a DM connection string and an engine connection string.\n     *\n     * @param dmConnectionString The DM connection string.\n     * @param defaultProps The default ingestion properties.\n     */\n    static fromDmConnectionString(\n        dmConnectionString: KustoConnectionStringBuilder,\n        defaultProps?: IngestionPropertiesInput\n    ): KustoManagedStreamingIngestClient {\n        if (dmConnectionString.dataSource == null || !dmConnectionString.dataSource.startsWith(ingestPrefix)) {\n            throw new Error(`DM connection string must include the prefix '${ingestPrefix}'`);\n        }\n\n        const engineConnectionString = KustoConnectionStringBuilder.fromExisting(dmConnectionString);\n        engineConnectionString.dataSource = engineConnectionString.dataSource?.replace(ingestPrefix, \"https://\");\n\n        return new KustoManagedStreamingIngestClient(engineConnectionString, dmConnectionString, defaultProps);\n    }\n\n    /**\n     * Creates a KustoManagedStreamingIngestClient from a engine connection string.\n     * This method infers the engine connection string.\n     * For advanced usage, use the constructor that takes an engine connection string and an engine connection string.\n     *\n     * @param engineConnectionString The engine connection string.\n     * @param defaultProps The default ingestion properties.\n     */\n    static fromEngineConnectionString(\n        engineConnectionString: KustoConnectionStringBuilder,\n        defaultProps?: IngestionPropertiesInput\n    ): KustoManagedStreamingIngestClient {\n        if (engineConnectionString.dataSource == null || engineConnectionString.dataSource.startsWith(ingestPrefix)) {\n            throw new Error(`Engine connection string must not include the prefix '${ingestPrefix}'`);\n        }\n\n        const dmConnectionString = KustoConnectionStringBuilder.fromExisting(engineConnectionString);\n        dmConnectionString.dataSource = dmConnectionString.dataSource?.replace(\"https://\", ingestPrefix);\n\n        return new KustoManagedStreamingIngestClient(engineConnectionString, dmConnectionString, defaultProps);\n    }\n\n    constructor(engineKcsb: string | KustoConnectionStringBuilder, dmKcsb: string | KustoConnectionStringBuilder, defaultProps?: IngestionPropertiesInput) {\n        super(defaultProps);\n        this.streamingIngestClient = new StreamingIngestClient(engineKcsb, defaultProps);\n        this.queuedIngestClient = new IngestClient(dmKcsb, defaultProps);\n\n        if (this.streamingIngestClient.defaultDatabase && this.streamingIngestClient.defaultDatabase !== this.queuedIngestClient.defaultDatabase) {\n            throw new Error(\n                `Default database for streaming ingest client (${this.streamingIngestClient.defaultDatabase}) must match default database for queued ingest client (${this.queuedIngestClient.defaultDatabase})`\n            );\n        }\n\n        this.defaultDatabase = this.streamingIngestClient.defaultDatabase;\n    }\n\n    /**\n     * Use Readable for Node.js and ArrayBuffer in browser\n     */\n    async ingestFromStream(\n        stream: StreamDescriptor | Readable | ArrayBuffer,\n        ingestionProperties?: IngestionPropertiesInput,\n        clientRequestId?: string\n    ): Promise<any> {\n        this.ensureOpen();\n        const props = this._getMergedProps(ingestionProperties);\n        let descriptor = stream instanceof StreamDescriptor ? stream : new StreamDescriptor(stream);\n        let result = isNode ? await tryStreamToArray(descriptor.stream as Readable, maxStreamSize) : descriptor.stream;\n        descriptor = new StreamDescriptor(result).merge(descriptor);\n        let streamingResult: Promise<any> | null = null;\n        // tryStreamToArray returns a Buffer in NodeJS impl if stream size is small enouph\n        if ((isNode && result instanceof Buffer) || !isNode) {\n            streamingResult = await this.streamWithRetries(\n                isNode ? descriptor.size ?? 0 : (descriptor.stream as ArrayBuffer).byteLength,\n                descriptor,\n                props,\n                clientRequestId,\n                result\n            );\n\n            result = isNode ? readableToStream(result) : descriptor.stream;\n        }\n\n        return streamingResult ?? this.queuedIngestClient.ingestFromStream(new StreamDescriptor(result).merge(descriptor), props);\n    }\n\n    /**\n     * Use string for Node.js and Blob in browser\n     */\n    async ingestFromFile(\n        file: FileDescriptor | string | Blob,\n        ingestionProperties?: IngestionPropertiesInput\n    ): Promise<KustoResponseDataSet | QueueSendMessageResponse> {\n        this.ensureOpen();\n\n        const stream = file instanceof FileDescriptor ? await tryFileToBuffer(file) : await tryFileToBuffer(new FileDescriptor(file));\n        return await this.ingestFromStream(stream, ingestionProperties);\n    }\n\n    async ingestFromBlob(blob: string | BlobDescriptor, ingestionProperties?: IngestionPropertiesInput, clientRequestId?: string): Promise<any> {\n        const props = this._getMergedProps(ingestionProperties);\n        const descriptor = blob instanceof BlobDescriptor ? blob : new BlobDescriptor(blob);\n        // No need to check blob size if it was given to us that it's not empty\n        await descriptor.fillSize();\n\n        const streamingResult = await this.streamWithRetries(descriptor.size ?? 0, descriptor, props, clientRequestId);\n        return streamingResult ?? this.queuedIngestClient.ingestFromBlob(descriptor, props);\n    }\n\n    async streamWithRetries(\n        length: number,\n        descriptor: AbstractDescriptor,\n        props?: IngestionPropertiesInput,\n        clientRequestId?: string,\n        stream?: Readable | ArrayBuffer\n    ): Promise<any> {\n        const isBlob = descriptor instanceof BlobDescriptor;\n        if (length <= maxStreamSize) {\n            // If we get buffer that means it was less than the max size, so we can do streamingIngestion\n            const retry = new ExponentialRetry(attemptCount, this.baseSleepTimeSecs, this.baseJitterSecs);\n            while (retry.shouldTry()) {\n                try {\n                    const sourceId =\n                        clientRequestId ??\n                        `KNC.executeManagedStreamingIngest${isBlob ? \"FromBlob\" : \"FromStream\"};${descriptor.sourceId};${retry.currentAttempt}`;\n                    if (isBlob) {\n                        return this.streamingIngestClient.ingestFromBlob(descriptor as BlobDescriptor, props, sourceId);\n                    }\n\n                    if (isNode) {\n                        return await this.streamingIngestClient.ingestFromStream(\n                            new StreamDescriptor(readableToStream(stream!)).merge(descriptor as StreamDescriptor),\n                            props,\n                            sourceId\n                        );\n                    }\n\n                    return await this.streamingIngestClient.ingestFromStream(descriptor as StreamDescriptor, props, sourceId);\n                } catch (err: unknown) {\n                    const oneApiError = err as { \"@permanent\"?: boolean };\n                    if (oneApiError[\"@permanent\"]) {\n                        throw err;\n                    }\n                    await retry.backoff();\n                }\n            }\n\n            stream = isBlob ? undefined : isNode && stream ? readableToStream(stream) : (descriptor as StreamDescriptor).stream;\n        }\n\n        return null;\n    }\n\n    close() {\n        if (!this._isClosed) {\n            this.streamingIngestClient.close();\n            this.queuedIngestClient.close();\n        }\n        super.close();\n    }\n}\n\nexport default KustoManagedStreamingIngestClient;\n"]}