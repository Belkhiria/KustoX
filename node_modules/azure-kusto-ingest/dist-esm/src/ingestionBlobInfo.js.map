{"version":3,"file":"ingestionBlobInfo.js","sourceRoot":"","sources":["../../src/ingestionBlobInfo.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport { BlobDescriptor } from \"./descriptors\";\nimport IngestionProperties, { ReportLevel, ReportMethod } from \"./ingestionProperties\";\n\nexport class IngestionBlobInfo {\n    BlobPath: string;\n    RawDataSize: number | null;\n    DatabaseName: string | null;\n    TableName: string | null;\n    RetainBlobOnSuccess: boolean;\n    FlushImmediately: boolean;\n    IgnoreSizeLimit: boolean;\n    ReportLevel: ReportLevel | null;\n    ReportMethod: ReportMethod | null;\n    SourceMessageCreationTime: Date;\n    Id: string;\n    AdditionalProperties: { [additional: string]: any };\n\n    constructor(blobDescriptor: BlobDescriptor, ingestionProperties: IngestionProperties, authContext: string | null = null) {\n        this.BlobPath = blobDescriptor.path;\n        this.RawDataSize = blobDescriptor.size;\n        this.DatabaseName = ingestionProperties.database ?? null;\n        this.TableName = ingestionProperties.table ?? null;\n        this.RetainBlobOnSuccess = true;\n        this.FlushImmediately = ingestionProperties.flushImmediately ?? false;\n        this.IgnoreSizeLimit = false;\n        this.ReportLevel = ingestionProperties.reportLevel ?? null;\n        this.ReportMethod = ingestionProperties.reportMethod ?? null;\n        this.SourceMessageCreationTime = new Date();\n        this.Id = blobDescriptor.sourceId || uuidv4();\n\n        const additionalProperties = ingestionProperties.additionalProperties || {};\n        additionalProperties.authorizationContext = authContext;\n\n        const tags: string[] = [];\n        if (ingestionProperties.additionalTags) {\n            tags.concat(ingestionProperties.additionalTags);\n        }\n        if (ingestionProperties.dropByTags) {\n            tags.concat(ingestionProperties.dropByTags.map((t) => \"drop-by:\" + t));\n        }\n        if (ingestionProperties.ingestByTags) {\n            tags.concat(ingestionProperties.ingestByTags.map((t) => \"ingest-by:\" + t));\n        }\n\n        if (tags && tags.length > 0) {\n            additionalProperties.tags = tags;\n        }\n\n        if (ingestionProperties.ingestIfNotExists) {\n            additionalProperties.ingestIfNotExists = ingestionProperties.ingestIfNotExists;\n        }\n\n        if (ingestionProperties.ingestionMappingColumns && ingestionProperties.ingestionMappingColumns.length > 0) {\n            // server expects a string\n            additionalProperties.ingestionMapping = JSON.stringify(ingestionProperties.ingestionMappingColumns.map((m) => m.toApiMapping()));\n        }\n\n        if (ingestionProperties.ingestionMappingReference) {\n            additionalProperties.ingestionMappingReference = ingestionProperties.ingestionMappingReference;\n        }\n\n        if (ingestionProperties.ingestionMappingKind) {\n            additionalProperties.ingestionMappingType = ingestionProperties.ingestionMappingKind;\n        }\n\n        if (ingestionProperties.validationPolicy) {\n            additionalProperties.ValidationPolicy = ingestionProperties.validationPolicy;\n        }\n\n        if (ingestionProperties.format) {\n            additionalProperties.format = ingestionProperties.format;\n        }\n        if (ingestionProperties.ignoreFirstRecord) {\n            additionalProperties.ignoreFirstRecord = ingestionProperties.ignoreFirstRecord;\n        }\n\n        this.AdditionalProperties = additionalProperties;\n    }\n}\n\nexport default IngestionBlobInfo;\n"]}