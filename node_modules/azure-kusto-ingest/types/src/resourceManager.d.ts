import { Client } from "azure-kusto-data";
export declare class ResourceURI {
    readonly uri: string;
    constructor(uri: string);
}
export declare class IngestClientResources {
    readonly securedReadyForAggregationQueues: ResourceURI[] | null;
    readonly failedIngestionsQueues: ResourceURI[] | null;
    readonly successfulIngestionsQueues: ResourceURI[] | null;
    readonly containers: ResourceURI[] | null;
    constructor(securedReadyForAggregationQueues?: ResourceURI[] | null, failedIngestionsQueues?: ResourceURI[] | null, successfulIngestionsQueues?: ResourceURI[] | null, containers?: ResourceURI[] | null);
    valid(): boolean;
}
export declare class ResourceManager {
    readonly kustoClient: Client;
    readonly isBrowser: boolean;
    readonly refreshPeriod: number;
    refreshPeriodOnError: number;
    ingestClientResources: IngestClientResources | null;
    ingestClientResourcesLastUpdate: number | null;
    authorizationContext: string | null;
    authorizationContextLastUpdate: number | null;
    private baseSleepTimeSecs;
    private baseJitterSecs;
    constructor(kustoClient: Client, isBrowser?: boolean);
    refreshIngestClientResources(): Promise<IngestClientResources>;
    getIngestClientResourcesFromService(): Promise<IngestClientResources>;
    getResourceByName(table: {
        rows: () => any;
    }, resourceName: string): ResourceURI[];
    refreshAuthorizationContext(): Promise<string>;
    tryRefresh(isAuthContextFetch: boolean): Promise<Error | null>;
    getAuthorizationContextFromService(): Promise<string>;
    getIngestionQueues(): Promise<ResourceURI[] | null>;
    getFailedIngestionsQueues(): Promise<ResourceURI[] | null>;
    getSuccessfulIngestionsQueues(): Promise<ResourceURI[] | null>;
    getContainers(): Promise<ResourceURI[] | null>;
    getAuthorizationContext(): Promise<string>;
    getBlockBlobClient(blobName: string): Promise<import("@azure/storage-blob").BlockBlobClient>;
    close(): void;
}
export default ResourceManager;
//# sourceMappingURL=resourceManager.d.ts.map