import { AbstractDescriptor, CompressionType, FileDescriptorBase } from "./descriptors";
/**
 * Describes a file to be ingested. Use string to describe a local path in Node.JS and Blob object in browsers
 */
export declare class FileDescriptor extends AbstractDescriptor implements FileDescriptorBase {
    /**
     * Use string in Node.JS and Blob in browser
     */
    readonly file: string | Blob;
    readonly extension?: string | undefined;
    readonly name?: string | undefined;
    zipped: boolean;
    compressionType: CompressionType;
    cleanupTmp?: () => Promise<void>;
    constructor(
    /**
     * Use string in Node.JS and Blob in browser
     */
    file: string | Blob, sourceId?: string | null, size?: number | null, compressionType?: CompressionType, extension?: string | undefined, // Extracted from file name by default
    name?: string | undefined);
    _gzip(): Promise<string>;
    prepare(): Promise<string>;
    private _calculateSize;
    cleanup(): Promise<void>;
    getCompressionSuffix(): string;
}
//# sourceMappingURL=fileDescriptor.d.ts.map