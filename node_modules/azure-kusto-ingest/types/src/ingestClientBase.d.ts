import { KustoConnectionStringBuilder } from "azure-kusto-data";
import ResourceManager from "./resourceManager.js";
import { IngestionPropertiesInput } from "./ingestionProperties.js";
import { AbstractKustoClient } from "./abstractKustoClient.js";
import { IngestionResult } from "./ingestionResult.js";
import { BlobDescriptor, StreamDescriptor } from "./descriptors.js";
export declare abstract class KustoIngestClientBase extends AbstractKustoClient {
    resourceManager: ResourceManager;
    applicationForTracing: string | null;
    clientVersionForTracing: string | null;
    static readonly MaxNumberOfRetryAttempts = 3;
    constructor(kcsb: string | KustoConnectionStringBuilder, defaultProps?: IngestionPropertiesInput, autoCorrectEndpoint?: boolean, isBrowser?: boolean);
    ingestFromBlob(blob: string | BlobDescriptor, ingestionProperties?: IngestionPropertiesInput, maxRetries?: number): Promise<IngestionResult>;
    private sendQueueMessage;
    private createStatusObject;
    uploadToBlobWithRetry(descriptor: string | Blob | ArrayBuffer | StreamDescriptor, blobName: string, maxRetries?: number): Promise<string>;
    close(): void;
}
export default KustoIngestClientBase;
//# sourceMappingURL=ingestClientBase.d.ts.map